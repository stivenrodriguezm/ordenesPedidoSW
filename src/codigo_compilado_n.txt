// ==================== script.py ====================

import os

def generar_compilado_codigo():
    """
    Busca archivos de código en una carpeta y sus subcarpetas, y los une todos
    en un único archivo de texto.
    """
    # Pide al usuario la ruta de la carpeta a escanear.
    # Puedes usar '.' para escanear la carpeta actual.
    ruta_carpeta = input("Introduce la ruta de la carpeta que quieres escanear (ej: . o C:\\Users\\TuUsuario\\proyectos\\mi-app): ")

    if not os.path.isdir(ruta_carpeta):
        print(f"Error: La ruta '{ruta_carpeta}' no es una carpeta válida.")
        return

    # Nombre del archivo de salida que se creará en el directorio actual.
    archivo_salida = 'codigo_compilado.txt'
    
    # Extensiones de archivo que queremos incluir.
    extensiones_permitidas = ('.js', '.jsx', '.css', '.py')
    
    # Carpetas que queremos ignorar.
    carpetas_excluidas = {'node_modules', '.git', 'venv', '__pycache__', '.vscode', 'dist', 'build'}

    contador_archivos = 0
    
    print("\nIniciando el escaneo...")

    try:
        # Abrimos el archivo de salida en modo escritura ('w') con codificación UTF-8.
        with open(archivo_salida, 'w', encoding='utf-8') as f_salida:
            # os.walk recorre el árbol de directorios de forma recursiva.
            for root, dirs, files in os.walk(ruta_carpeta, topdown=True):
                
                # Excluimos las carpetas no deseadas para que os.walk no entre en ellas.
                # Se modifica 'dirs' en el lugar para afectar el recorrido.
                dirs[:] = [d for d in dirs if d not in carpetas_excluidas]

                for nombre_archivo in files:
                    # Comprobamos si el archivo tiene una de las extensiones permitidas.
                    if nombre_archivo.endswith(extensiones_permitidas):
                        contador_archivos += 1
                        ruta_completa = os.path.join(root, nombre_archivo)
                        
                        print(f"Procesando: {ruta_completa}")

                        # Escribimos el encabezado con el nombre del archivo.
                        # Usamos la ruta relativa para mayor claridad.
                        ruta_relativa = os.path.relpath(ruta_completa, ruta_carpeta)
                        f_salida.write(f"// ==================== {ruta_relativa} ====================\n\n")
                        
                        try:
                            # Abrimos el archivo de código fuente en modo lectura ('r').
                            with open(ruta_completa, 'r', encoding='utf-8') as f_entrada:
                                contenido = f_entrada.read()
                                f_salida.write(contenido)
                            
                            # Añadimos un par de saltos de línea y un separador para mayor legibilidad.
                            f_salida.write("\n\n\n")

                        except Exception as e:
                            # Si hay un error leyendo un archivo, lo registramos y continuamos.
                            error_msg = f"// ***** No se pudo leer el archivo: {ruta_relativa} | Error: {e} *****\n\n\n"
                            print(f"  ADVERTENCIA: {error_msg}")
                            f_salida.write(error_msg)

        print("\n--------------------------------------------------")
        print("¡Proceso completado exitosamente!")
        print(f"Se han procesado un total de {contador_archivos} archivos.")
        print(f"El resultado se ha guardado en: {os.path.abspath(archivo_salida)}")
        print("--------------------------------------------------")

    except Exception as e:
        print(f"\nOcurrió un error inesperado durante el proceso: {e}")


# Punto de entrada para ejecutar el script.
if __name__ == "__main__":
    generar_compilado_codigo()


// ==================== PrivateRoute.jsx ====================

import { Navigate } from "react-router-dom";
import { useContext } from "react";
import { AppContext } from "./AppContext";

const GlobalLoader = () => (
  <>
    <style>
      {`
        @keyframes fill-text {
          from {
            width: 0%;
          }
          to {
            width: 100%;
          }
        }

        .global-loader {
          position: fixed;
          top: 0;
          left: 0;
          width: 100vw;
          height: 100vh;
          display: flex;
          justify-content: center;
          align-items: center;
          background-color: var(--color-background);
          z-index: 9999;
        }

        .loader-logo {
          font-family: var(--font-display);
          font-size: 6rem;
          font-weight: 400;
          position: relative;
          color: var(--color-border); /* Color del texto base (gris) */
        }

        .loader-logo::before {
          content: 'LOTTUS';
          position: absolute;
          top: 0;
          left: 0;
          width: 0%;
          height: 100%;
          color: var(--color-text-primary); /* Color del texto que se va llenando (negro) */
          overflow: hidden;
          animation: fill-text 2s ease-in-out infinite;
        }
      `}
    </style>
    <div className="global-loader">
      <div className="loader-logo">LOTTUS</div>
    </div>
  </>
);


function PrivateRoute({ children }) {
  const token = localStorage.getItem("accessToken");
  const { isLoading } = useContext(AppContext);

  if (isLoading) {
    return <GlobalLoader />;
  }

  return token ? children : <Navigate to="/login" />;
}

export default PrivateRoute;



// ==================== index.css ====================

/* ==========================================================================
   1. Importación de Fuentes (Inter & Audiowide)
   ========================================================================== */
@import url('https://fonts.googleapis.com/css2?family=Audiowide&family=Inter:wght@400;500;600;700&display=swap');

/* ==========================================================================
   2. Variables del Sistema de Diseño (CSS Custom Properties)
   ========================================================================== */
:root {
  /* Tipografía */
  --font-body: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
  --font-display: 'Audiowide', cursive;

  /* Paleta de Colores Principal - Light Mode Profesional */
  --color-background: #f7f7f7;       /* Gris muy claro para el fondo */
  --color-surface: #ffffff;          /* Blanco puro para tarjetas y superficies */
  --color-border: #dee2e6;           /* Borde sutil y claro */
  --color-border-hover: #ced4da;      /* Borde más oscuro para interacción */
  
  /* Paleta de Texto */
  --color-text-primary: #212529;    /* Negro suave para la máxima legibilidad */
  --color-text-secondary: #495057;  /* Gris oscuro para texto secundario */
  --color-text-placeholder: #adb5bd;/* Gris más claro para placeholders */

  /* Paleta de Acentos Azules */
  --color-primary: #1657b8;           /* Azul vibrante principal */
  --color-primary-hover: #104ca7;    /* Azul más oscuro para interacción */
  --color-primary-focus-shadow: rgba(13, 110, 253, 0.25); /* Sombra/Glow para focus */
  --color-primary-light-bg: #f5f7fc; /* Fondo azul claro para estados activos/hover sutiles */
  
  /* Paleta Oscura para el Sidebar */
  --color-sidebar-bg: #091420;           /* Azul marino muy oscuro */
  --color-sidebar-text: #c8d0d8;        /* Texto gris claro */
  --color-sidebar-text-hover: #ffffff;   /* Texto blanco para hover/activo */
  --color-sidebar-active-bg: rgba(13, 110, 253, 0.1); /* Fondo translúcido azul para item activo */
  --color-sidebar-border: #1d2d44;       /* Borde interno del sidebar */

  /* Colores de Estado */
  --color-destructive: #dc3545;       /* Rojo para acciones de borrado o error */
  --color-destructive-hover: #bb2d3b;
  --color-success: #198754;           /* Verde para confirmaciones */

  /* Sombras y Radios */
  --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.07), 0 2px 4px -2px rgba(0, 0, 0, 0.07);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.08), 0 4px 6px -2px rgba(0, 0, 0, 0.08);
  --border-radius: 8px;
}

/* ==========================================================================
   3. Reset Básico y Estilos Globales
   ========================================================================== */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: var(--font-body);
  background-color: var(--color-background);
  color: var(--color-text-primary);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Estructura del Layout Principal */
.app-container {
  display: flex;
}

.main-content {
  flex-grow: 1;
  margin-left: 260px; /* Nuevo ancho fijo del sidebar */
  padding: 2rem;
  padding-top: calc(70px + 2rem); /* Deja espacio para el Header fijo */
}

main {
  padding: 0;
  width: 100%;
}

/* Estilo unificado para los contenedores de página */
.page-container {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

/* Estilo unificado para los encabezados de página */
.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.page-header h1 {
  font-size: 1.75rem;
  font-weight: 600;
  color: var(--color-text-primary);
}

/* Estilo unificado para las tablas */
.table-container {
  background-color: var(--color-surface);
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius);
  box-shadow: var(--shadow-sm);
  overflow: hidden;
}

/* Estilo unificado para el loader */
.loading-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 4rem;
  text-align: center;
}

.loader {
  border: 4px solid var(--color-border);
  border-top: 4px solid var(--color-primary);
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  margin-bottom: 1rem;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.loading-container p {
  font-weight: 500;
  color: var(--color-text-secondary);
}

/* Estilos unificados para modales */
.modal-overlay {
  position: fixed; top: 0; left: 0; right: 0; bottom: 0;
  background-color: rgba(13, 17, 23, 0.6);
  display: flex; justify-content: center; align-items: center;
  z-index: 1000;
  backdrop-filter: blur(4px);
}
.modal-content {
  background-color: var(--color-surface);
  padding: 2rem;
  border-radius: var(--border-radius);
  width: 500px; max-width: 90%;
  box-shadow: var(--shadow-lg);
  border: 1px solid var(--color-border);
}
.modal-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; }
.modal-header h3 { margin: 0; font-size: 1.25rem; color: var(--color-text-primary); font-weight: 600; }
.modal-close { background: none; border: none; font-size: 1.5rem; cursor: pointer; color: var(--color-text-secondary); }
.form-group { margin-bottom: 1rem; }
.form-group label { display: block; margin-bottom: 0.5rem; font-weight: 500; color: var(--color-text-secondary); font-size: 0.875rem; }
.form-group input, .form-group select, .form-group textarea {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid var(--color-border);
  border-radius: 6px;
  font-size: 1rem;
  background-color: #fff;
  color: var(--color-text-primary);
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
}
.form-group input:focus, .form-group select:focus, .form-group textarea:focus {
  outline: none;
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px var(--color-primary-focus-shadow);
}
.modal-submit {
  width: 100%;
  padding: 0.75rem;
  background-color: var(--color-primary);
  color: #fff;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: 600;
  margin-top: 1rem;
  transition: background-color 0.2s ease;
}
.modal-submit:hover { background-color: var(--color-primary-hover); }



// ==================== main.jsx ====================

// src/main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { AppProvider } from "./AppContext";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import "./index.css";

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: Infinity,
      cacheTime: 30 * 60 * 1000,
      refetchOnWindowFocus: false,
    },
  },
});

ReactDOM.createRoot(document.getElementById("root")).render(
  <QueryClientProvider client={queryClient}>
    <AppProvider>
      <App />
    </AppProvider>
  </QueryClientProvider>
);


// ==================== theme.jsx ====================

import { createTheme } from "@mui/material/styles";

const theme = createTheme({
  palette: {
    primary: {
      main: "#1976d2", // Azul predeterminado de MUI
    },
    secondary: {
      main: "#f50057", // Rosa fuerte
    },
    background: {
      default: "#f4f4f4",
      paper: "#ffffff",
    },
  },
  typography: {
    fontFamily: "Roboto, Arial, sans-serif",
    h1: {
      fontSize: "2rem",
      fontWeight: 600,
    },
    button: {
      textTransform: "none",
    },
  },
});

export default theme;
/** 

tengo un proyecto ya bien avanzado el cual es una plataforma para una empresa de muebles y la idea es administrar desde aca varias cosas. 



te dare gran parte del codigo frontend para que entiendas el estilo de las paginas y tambien el codigo backend para que entiendas la logica y puedas ayudarme a continuar con el proyecto.



Frontend: react. Backend: django. 



FRONTEND:



/src

     /assets

     /components

     /hooks

     /pages

     /services

     App.jsx

     AppContext.jsx

     index.css

     main.jsx

     PrivateRoute.jsx

     theme.jsx**/


// ==================== AppContext.jsx ====================

import React, { createContext, useState, useEffect, useContext } from "react";
import axios from "axios";

export const AppContext = createContext();

export function AppProvider({ children }) {
  const [proveedores, setProveedores] = useState([]);
  const [clientes, setClientes] = useState([]);
  const [usuario, setUsuario] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const token = localStorage.getItem("accessToken");

  const fetchInitialData = async () => {
    if (!token) {
      setIsLoading(false);
      return;
    }

    try {
      setIsLoading(true);
      const [proveedoresRes, clientesRes, userRes] = await Promise.all([
        axios.get("http://127.0.0.1:8000/api/proveedores/", { headers: { Authorization: `Bearer ${token}` } }),
        axios.get("http://127.0.0.1:8000/api/clientes/", { headers: { Authorization: `Bearer ${token}` } }),
        axios.get("http://127.0.0.1:8000/api/user/", { headers: { Authorization: `Bearer ${token}` } }),
      ]);
      setProveedores(proveedoresRes.data);
      setClientes(clientesRes.data.results || []);
      setUsuario(userRes.data);
    } catch (error) {
      console.error("Error cargando datos iniciales:", error.response?.data || error.message);
      if (error.response?.status === 401) {
        localStorage.clear();
        window.location.href = '/login';
      }
    } finally {
      setIsLoading(false);
    }
  };

  const updateProveedores = async () => {
      if (!token) return;
      try {
        const proveedoresRes = await axios.get("http://127.0.0.1:8000/api/proveedores/", {
          headers: { Authorization: `Bearer ${token}` }
        });
        setProveedores(proveedoresRes.data);
      } catch (error) {
        console.error("Error actualizando proveedores:", error);
      }
  };


  useEffect(() => {
    fetchInitialData();
  }, [token]);

  const value = {
    proveedores,
    clientes,
    usuario,
    setUsuario,
    isLoading,
    updateProveedores,
  };

  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;
}

export const useAppContext = () => useContext(AppContext);


// ==================== App.jsx ====================

import { HashRouter as Router, Routes, Route } from "react-router-dom";
import PrivateRoute from "./PrivateRoute";
import LoginPage from "./pages/LoginPage";
import ReferenciasPage from "./pages/ReferenciasPage";
import ProveedoresPage from "./pages/ProveedoresPage";
import OrdenesPage from "./pages/OrdenesPage";
import EditarProveedorPage from "./pages/EditarProveedorPage";
import CrearPedidoPage from "./pages/CrearPedidoPage";
import PerfilPage from "./pages/PerfilPage";
import Sidebar from "./components/Sidebar";
import Header from "./components/Header";
import HomePage from "./pages/HomePage";
import Clientes from "./pages/Clientes";
import Ventas from "./pages/Ventas";
import EditarVenta from "./pages/EditarVenta";
import NuevaVenta from "./pages/NuevaVenta";
import Caja from "./pages/Caja";
import RecibosCaja from "./pages/RecibosCaja";
import ComprobantesEgreso from "./pages/ComprobantesEgreso";
import { AppProvider } from "./AppContext";

const MainLayout = ({ children }) => {
  return (
    <div className="app-container">
      <Sidebar />
      <div className="main-content">
        <Header />
        <main>
          {children}
        </main>
      </div>
    </div>
  );
};

function App() {
  return (
    <AppProvider>
      <Router>
        <Routes>
          <Route path="/login" element={<LoginPage />} />
          <Route path="/*" element={
            <PrivateRoute>
              <MainLayout>
                <Routes>
                  <Route path="/" element={<HomePage />} />
                  <Route path="/ordenes" element={<OrdenesPage />} />
                  <Route path="/referencias" element={<ReferenciasPage />} />
                  <Route path="/proveedores" element={<ProveedoresPage />} />
                  <Route path="/proveedores/editar/:id" element={<EditarProveedorPage />} />
                  <Route path="/ordenes/nuevo" element={<CrearPedidoPage />} />
                  <Route path="/perfil" element={<PerfilPage />} />
                  <Route path="/clientes" element={<Clientes />} />
                  <Route path="/ventas" element={<Ventas />} />
                  <Route path="/nuevaVenta" element={<NuevaVenta />} />
                  <Route path="/EditarVenta/:id/" element={<EditarVenta />} />
                  <Route path="/caja" element={<Caja />} />
                  <Route path="/recibos-caja" element={<RecibosCaja />} />
                  <Route path="/comprobantes-egreso" element={<ComprobantesEgreso />} />
                </Routes>
              </MainLayout>
            </PrivateRoute>
          }/>
        </Routes>
      </Router>
    </AppProvider>
  );
}

export default App;



// ==================== components/Sidebar.css ====================

.sidebar {
  position: fixed;
  top: 0;
  left: 0;
  width: 260px;
  height: 100vh;
  background-color: var(--color-sidebar-bg);
  color: var(--color-sidebar-text);
  display: flex;
  flex-direction: column;
  z-index: 1001; /* Asegura que esté por encima del header */
  box-shadow: var(--shadow-lg);
  border-right: 1px solid var(--color-sidebar-border);
}

.sidebar-header {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 70px; /* Misma altura que el header */
  padding: 0 1.5rem;
  border-bottom: 1px solid var(--color-sidebar-border);
}

.logo-link {
  font-family: var(--font-display);
  font-size: 2.25rem;
  color: #ffffff;
  text-decoration: none;
  letter-spacing: 3px;
  transition: color 0.3s ease;
}

.logo-link:hover {
  color: var(--color-primary-hover);
}

.sidebar-nav {
  padding: 1rem 0;
  overflow-y: auto;
  flex-grow: 1;
}

.sidebar-nav ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.nav-subtitle {
  font-size: 0.75rem;
  text-transform: uppercase;
  font-weight: 600;
  color: var(--color-text-secondary);
  padding: 1rem 1.5rem 0.5rem;
  letter-spacing: 0.5px;
}

.nav-link {
  display: flex;
  align-items: center;
  padding: 0.75rem 1.5rem;
  margin: 0.25rem 1rem;
  border-radius: var(--border-radius);
  color: var(--color-sidebar-text);
  text-decoration: none;
  font-weight: 500;
  transition: background-color 0.2s ease, color 0.2s ease;
}

.nav-link:hover {
  background-color: var(--color-sidebar-active-bg);
  color: var(--color-sidebar-text-hover);
}

.nav-link.active {
  background-color: var(--color-primary);
  color: #ffffff;
  font-weight: 600;
  box-shadow: 0 0 15px rgba(13, 110, 253, 0.4);
}

.nav-icon {
  font-size: 1.25rem;
  margin-right: 1rem;
  width: 24px;
  text-align: center;
}


// ==================== components/Sidebar.jsx ====================

import React, { useContext } from "react";
import { NavLink } from "react-router-dom";
import { FaBoxes, FaClipboardList, FaFileInvoiceDollar, FaHome, FaUsers, FaWarehouse, FaCashRegister, FaReceipt, FaFileInvoice } from 'react-icons/fa';
import { AppContext } from "../AppContext";
import "./Sidebar.css";

function Sidebar() {
  const { usuario } = useContext(AppContext);

  const navSections = [
    {
      title: "General",
      items: [
        { to: "/", icon: <FaHome />, label: "Inicio" },
        { to: "/ventas", icon: <FaFileInvoiceDollar />, label: "Ventas" },
        { to: "/ordenes", icon: <FaClipboardList />, label: "Órdenes de Pedido" },
      ],
      roles: ["ADMINISTRADOR", "VENDEDOR", "AUXILIAR"]
    },
    {
      title: "Finanzas",
      items: [
        { to: "/caja", icon: <FaCashRegister />, label: "Caja" },
        { to: "/recibos-caja", icon: <FaReceipt />, label: "Recibos de Caja" },
        { to: "/comprobantes-egreso", icon: <FaFileInvoice />, label: "Comprobantes" },
      ],
      roles: ["ADMINISTRADOR", "AUXILIAR"]
    },
    {
      title: "Bases de Datos",
      items: [
        { to: "/clientes", icon: <FaUsers />, label: "Clientes" },
        { to: "/proveedores", icon: <FaWarehouse />, label: "Proveedores" },
        { to: "/referencias", icon: <FaBoxes />, label: "Referencias" },
      ],
      roles: ["ADMINISTRADOR", "AUXILIAR"]
    }
  ];

  return (
    <aside className="sidebar">
      <div className="sidebar-header">
        <NavLink to="/" className="logo-link">LOTTUS</NavLink>
      </div>
      <nav className="sidebar-nav">
        {navSections.map(section => (
          (section.roles.includes(usuario?.role)) && (
            <div key={section.title}>
              <h3 className="nav-subtitle">{section.title}</h3>
              <ul>
                {section.items.map(item => (
                  <li key={item.to}>
                    <NavLink to={item.to} className={({ isActive }) => isActive ? "nav-link active" : "nav-link"}>
                      <div className="nav-icon">{item.icon}</div>
                      <span>{item.label}</span>
                    </NavLink>
                  </li>
                ))}
              </ul>
            </div>
          )
        ))}
      </nav>
    </aside>
  );
}

export default Sidebar;



// ==================== components/PrivateRoute.jsx ====================

import { Navigate } from "react-router-dom";

function PrivateRoute({ children }) {
  const accessToken = localStorage.getItem("accessToken");
  return accessToken ? children : <Navigate to="/login" />;
}

export default PrivateRoute;



// ==================== components/Header.jsx ====================

import React, { useState, useEffect, useRef, useContext } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { FaUserCircle, FaSignOutAlt, FaKey } from "react-icons/fa";
import "./Header.css";
import { AppContext } from "../AppContext";

function Header() {
  const { usuario } = useContext(AppContext);
  const [menuOpen, setMenuOpen] = useState(false);
  const location = useLocation();
  const navigate = useNavigate();
  const menuRef = useRef(null);
  const userBarRef = useRef(null);

  const getTitle = () => {
    const path = location.pathname;
    // Transforma la ruta en un título legible, ej. /recibos-caja -> Recibos De Caja
    if (path === "/") return "Inicio";
    const title = path.split('/')[1] || 'inicio';
    return title
      .replace(/-/g, ' ')
      .split(' ')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  };

  const handleLogout = () => {
    localStorage.clear();
    sessionStorage.clear();
    navigate("/login");
  };

  const handleNavigateToProfile = () => {
    navigate("/perfil");
    setMenuOpen(false);
  };

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        menuRef.current &&
        !menuRef.current.contains(event.target) &&
        userBarRef.current &&
        !userBarRef.current.contains(event.target)
      ) {
        setMenuOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  return (
    <header className="header">
      <div className="header-content">
        <div className="header-left">
          <h2 className="header-title">{getTitle()}</h2>
        </div>
        
        <div className="header-right">
          <div className="user-menu">
            <button className="user-button" onClick={() => setMenuOpen(prev => !prev)} ref={userBarRef}>
              <span className="user-name">{usuario ? `${usuario.first_name} ${usuario.last_name}` : 'Usuario'}</span>
              <FaUserCircle className="user-icon" />
            </button>
            {menuOpen && (
              <div className="dropdown-menu" ref={menuRef}>
                <div className="dropdown-header">
                  <span className="user-fullname">{usuario ? `${usuario.first_name} ${usuario.last_name}` : 'Invitado'}</span>
                  <span className="user-role">{usuario ? usuario.role : 'Sin rol'}</span>
                </div>
                <ul>
                  <li onClick={handleNavigateToProfile}>
                    <FaKey className="dropdown-icon" />
                    <span>Cambiar Contraseña</span>
                  </li>
                  <li onClick={handleLogout} className="logout-item">
                    <FaSignOutAlt className="dropdown-icon" />
                    <span>Cerrar Sesión</span>
                  </li>
                </ul>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
  );
}

export default Header;



// ==================== components/Header.css ====================

.header {
  height: 70px;
  width: calc(100% - 260px); /* Ancho del sidebar */
  background: var(--color-surface);
  border-bottom: 1px solid var(--color-border);
  position: fixed; /* Fijado en la parte superior */
  top: 0;
  left: 260px; /* Desplazado a la derecha del sidebar */
  z-index: 1000;
  padding: 0 2rem;
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 100%;
  width: 100%;
}

.header-left {
  display: flex;
  align-items: center;
}

.header-title {
  font-size: 1.5rem;
  font-weight: 600;
  color: var(--color-text-primary);
  margin: 0;
}

.header-right {
  display: flex;
  align-items: center;
}

.user-menu {
  position: relative;
}

.user-button {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  background-color: transparent;
  border: 1px solid transparent;
  cursor: pointer;
  padding: 0.5rem 1rem;
  border-radius: 999px; /* Pill shape */
  transition: background-color 0.2s ease, border-color 0.2s ease;
}

.user-button:hover {
  background-color: var(--color-background);
  border-color: var(--color-border);
}

.user-name {
  font-weight: 500;
  font-size: 0.9rem;
  color: var(--color-text-secondary);
}

.user-icon {
  font-size: 1.75rem;
  color: #adb5bd;
}

.dropdown-menu {
  position: absolute;
  top: calc(100% + 12px);
  right: 0;
  background-color: var(--color-surface);
  border-radius: 12px;
  box-shadow: var(--shadow-lg);
  width: 240px;
  z-index: 1001; /* Asegura que esté sobre el contenido */
  border: 1px solid var(--color-border);
  animation: fadeIn 0.15s ease-out;
  overflow: hidden;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-10px); }
  to { opacity: 1; transform: translateY(0); }
}

.dropdown-header {
  padding: 1rem;
  background-color: #f8f9fa;
  border-bottom: 1px solid var(--color-border);
}

.user-fullname {
  display: block;
  font-weight: 600;
  font-size: 1rem;
  color: var(--color-text-primary);
  margin: 0;
}

.user-role {
  display: block;
  font-size: 0.8rem;
  color: var(--color-text-secondary);
  margin-top: 0.25rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.dropdown-menu ul {
  list-style: none;
  padding: 0.5rem;
  margin: 0;
}

.dropdown-menu li {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem 1rem;
  cursor: pointer;
  color: var(--color-text-primary);
  font-weight: 500;
  border-radius: 8px;
  transition: background-color 0.2s ease, color 0.2s ease;
}

.dropdown-menu li:hover {
  background-color: var(--color-primary-light-bg);
  color: var(--color-primary);
}

.dropdown-menu li:hover .dropdown-icon {
  color: var(--color-primary);
}

.dropdown-menu .logout-item {
  border-top: 1px solid var(--color-border);
  margin-top: 0.5rem;
  padding-top: calc(0.5rem + 8px); /* padding + margin */
}

.dropdown-menu .logout-item:hover {
  background-color: #fff5f5;
  color: var(--color-destructive);
}

.dropdown-menu .logout-item:hover .dropdown-icon {
  color: var(--color-destructive);
}

.dropdown-icon {
  color: var(--color-text-secondary);
  width: 20px;
  font-size: 1rem;
  transition: color 0.2s ease;
}



// ==================== hooks/useAuth.js ====================

// useAuth.js (nuevo hook para manejar autenticación)
import { useState, useEffect } from 'react';

function useAuth() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  
  useEffect(() => {
    const token = localStorage.getItem('token');
    setIsAuthenticated(!!token);
  }, []);
  
  return { isAuthenticated };
}

export default useAuth;


// ==================== services/api.js ====================

// src/services/api.js
import axios from "axios";

// Crear instancia de Axios para las solicitudes
const API = axios.create({
  baseURL: "http://127.0.0.1:8000/api/",  // Verifica que esta URL apunte a tu backend local
});

// Interceptor para agregar el token de autorización en cada solicitud
API.interceptors.request.use((config) => {
  const token = localStorage.getItem("accessToken");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
}, (error) => {
  return Promise.reject(error);
});

// Interceptor para manejar errores en las respuestas
API.interceptors.response.use(
  (response) => {
    return response; // Si la respuesta es exitosa, devuélvela tal cual
  },
  (error) => {
    // Si el error es de autenticación (401 Unauthorized), redirige al login
    if (error.response && error.response.status === 401) {
      console.error("Token inválido o expirado. Redirigiendo al login...");
      localStorage.removeItem("accessToken");  // Eliminar el token inválido
      localStorage.removeItem("refreshToken"); // Eliminar el refresh token también
      window.location.href = "/login";  // Redirigir al login (ajusta esto si estás usando react-router)
    }
    return Promise.reject(error); // Devuelve el error para que el frontend lo maneje
  }
);

// Función para obtener las referencias de un proveedor
export const fetchReferencias = (proveedorId) =>
  API.get(`referencias/?proveedor=${proveedorId}`).then((res) => res.data);

// Función para obtener las órdenes de pedido, con filtros
export const fetchOrdenes = (filtros = {}, userId) => {
  let endpoint = "listar-pedidos/";
  const params = [];
  if (userId) params.push(`usuario_id=${userId}`);
  if (filtros.proveedor) params.push(`id_proveedor=${filtros.proveedor}`);
  if (filtros.vendedor) params.push(`id_vendedor=${filtros.vendedor}`);
  if (filtros.estado) params.push(`estado=${filtros.estado}`);
  if (params.length) endpoint += `?${params.join("&")}`;
  return API.get(endpoint).then((res) => res.data);
};

export default API;




// ==================== pages/Ventas.jsx ====================

import React, { useState, useEffect } from 'react';
import './Ventas.css';
import axios from 'axios';
import * as XLSX from 'xlsx';
import { useNavigate } from 'react-router-dom';
import { FaChevronDown } from "react-icons/fa";

const Ventas = () => {
  const navigate = useNavigate();
  const [ventas, setVentas] = useState([]);
  const [filteredVentas, setFilteredVentas] = useState([]);
  const [vendedores, setVendedores] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedMonthYear, setSelectedMonthYear] = useState('');
  const [selectedVendedor, setSelectedVendedor] = useState('');
  const [selectedEstado, setSelectedEstado] = useState('');
  const [expandedVentaId, setExpandedVentaId] = useState(null);
  const [ventaDetails, setVentaDetails] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [loadingDetails, setLoadingDetails] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [errorMessage, setErrorMessage] = useState('');

  // Estados para los modales
  const [showObservacionClienteModal, setShowObservacionClienteModal] = useState(false);
  const [showObservacionVentaModal, setShowObservacionVentaModal] = useState(false);
  const [showRemisionModal, setShowRemisionModal] = useState(false);
  const [observacionClienteText, setObservacionClienteText] = useState('');
  const [observacionVentaText, setObservacionVentaText] = useState('');
  const [remisionData, setRemisionData] = useState({ codigo: '', fecha: '' });

  const pageSize = 30;

  const formatDate = (dateStr) => {
    if (!dateStr) return '-';
    const [year, month, day] = dateStr.split('-');
    return `${day}-${month}-${year}`;
  };

  const formatCurrency = (value) => {
    if (value === null || value === undefined) return '$0';
    let number = 0;
    if (typeof value === 'number') {
      number = value;
    } else if (typeof value === 'string') {
      const cleanedString = value.replace(/[$.]/g, '').replace(',', '.');
      number = parseFloat(cleanedString);
    }
    if (isNaN(number)) {
      return '$0';
    }
    return `$${Math.round(number).toLocaleString('es-CO')}`;
  };

  const capitalizeEstado = (estado) => {
    if (!estado) return '';
    return estado.charAt(0).toUpperCase() + estado.slice(1).toLowerCase();
  };

  const mesesAnios = (() => {
    const meses = [
      'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
      'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
    ];
    const result = [];
    result.push('Diciembre 2024');
    for (let month = 0; month < 12; month++) {
      result.push(`${meses[month]} 2025`);
    }
    return result;
  })();

  const estados = ['pendiente', 'entregado', 'anulado', 'abandonado', 'archivado'];

  useEffect(() => {
    const today = new Date();
    const day = today.getDate();
    let month = today.getMonth();
    let year = today.getFullYear();

    if (day < 6) {
      month = month - 1;
      if (month < 0) {
        month = 11;
        year = year - 1;
      }
    }

    const monthNames = [
      'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
      'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
    ];
    const selected = `${monthNames[month]} ${year}`;
    if (mesesAnios.includes(selected)) {
      setSelectedMonthYear(selected);
    } else {
      setSelectedMonthYear(mesesAnios[0]);
    }
  }, []);

  useEffect(() => {
    const fetchVendedores = async () => {
      const token = localStorage.getItem("accessToken");
      try {
        const response = await axios.get('http://127.0.0.1:8000/api/vendedores/', {
          headers: { Authorization: `Bearer ${token}` }
        });
        setVendedores(response.data);
      } catch (error) {
        console.error('Error cargando vendedores:', error);
        setErrorMessage('Error al cargar los vendedores.');
      }
    };
    fetchVendedores();
  }, []);

  // ==================== INICIO DE LA CORRECCIÓN DE LÓGICA DE FECHAS ====================
  useEffect(() => {
    const fetchVentas = async () => {
      setIsLoading(true);
      const token = localStorage.getItem("accessToken");
      try {
        const params = { page_size: pageSize, page: currentPage };
        
        if (selectedMonthYear) {
          const [mesTexto, yearStr] = selectedMonthYear.split(' ');
          const year = parseInt(yearStr, 10);
          
          const monthNames = [
            'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
            'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
          ];
          
          // Obtiene el índice del mes (0-11)
          let monthIndex = monthNames.indexOf(mesTexto);

          // Si es Diciembre, el mes en el array `mesesAnios` es 0, pero el índice real es 11.
          if (mesTexto === 'Diciembre') {
            monthIndex = 11;
          }

          // La API espera el mes de la FECHA FINAL del período.
          // Ej: Para "Junio" (índice 5), el período es del 6 de junio al 5 de julio. La API necesita el mes 7 (Julio).
          let apiMonth = monthIndex + 2;
          let apiYear = year;

          // Si el mes pasa de 12 (Diciembre), se convierte en 1 (Enero) del siguiente año.
          if (apiMonth > 12) {
              apiMonth = 1; 
              apiYear += 1;
          }

          params.mes = apiMonth;
          params.year = apiYear;
        }

        if (selectedVendedor) params.vendedor = selectedVendedor;
        if (selectedEstado) params.estado = selectedEstado;

        const response = await axios.get('http://127.0.0.1:8000/api/ventas/', {
          headers: { Authorization: `Bearer ${token}` },
          params
        });

        setVentas(response.data.results || []);
        setTotalPages(Math.ceil(response.data.count / pageSize));
      } catch (error) {
        console.error('Error cargando ventas:', error);
        setErrorMessage('Error al cargar las ventas.');
        setVentas([]);
      } finally {
        setIsLoading(false);
      }
    };
    fetchVentas();
  }, [currentPage, selectedMonthYear, selectedVendedor, selectedEstado]);
  // ==================== FIN DE LA CORRECCIÓN DE LÓGICA DE FECHAS ====================

  useEffect(() => {
    const filtered = ventas.filter(venta => {
      const idVenta = venta.id_venta ? venta.id_venta.toString() : '';
      const cliente = venta.cliente || '';
      return (
        idVenta.toLowerCase().includes(searchTerm.toLowerCase()) ||
        cliente.toLowerCase().includes(searchTerm.toLowerCase())
      );
    });
    setFilteredVentas(filtered);
  }, [ventas, searchTerm]);
  
  const handleExpandVenta = async (ventaId) => {
    if (expandedVentaId === ventaId) {
      setExpandedVentaId(null);
      setVentaDetails(null);
      return;
    }

    setExpandedVentaId(ventaId);
    setLoadingDetails(true);
    setVentaDetails(null);

    const token = localStorage.getItem("accessToken");
    try {
      const response = await axios.get(`http://127.0.0.1:8000/api/ventas/${ventaId}/`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setVentaDetails(response.data);
    } catch (error) {
      console.error('Error al obtener detalles de la venta:', error);
      setErrorMessage('Error al cargar los detalles de la venta.');
    } finally {
      setLoadingDetails(false);
    }
  };

  const exportVentas = async () => {
    const token = localStorage.getItem("accessToken");
    try {
      const response = await axios.get('http://127.0.0.1:8000/api/ventas/?page_size=1000', {
        headers: { Authorization: `Bearer ${token}` }
      });
      const data = response.data.results || [];

      const worksheet = XLSX.utils.json_to_sheet(data);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, "Ventas");
      XLSX.writeFile(workbook, "ventas.xlsx");
    } catch (error) {
      console.error('Error al exportar ventas:', error);
      setErrorMessage('Error al exportar las ventas.');
    }
  };

  const handleAddObservacionCliente = async () => {
    const token = localStorage.getItem("accessToken");
    try {
      await axios.post(
        `http://127.0.0.1:8000/api/clientes/${ventaDetails.cliente.id}/observaciones/`,
        { texto: observacionClienteText },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      const response = await axios.get(`http://127.0.0.1:8000/api/ventas/${expandedVentaId}/`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setVentaDetails(response.data);
      setObservacionClienteText('');
      setShowObservacionClienteModal(false);
    } catch (error) {
      console.error('Error al agregar observación cliente:', error);
      setErrorMessage('Error al agregar la observación del cliente.');
    }
  };

  const handleAddObservacionVenta = async () => {
    const token = localStorage.getItem("accessToken");
    try {
      await axios.post(
        `http://127.0.0.1:8000/api/ventas/${expandedVentaId}/observaciones/`,
        { texto: observacionVentaText },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      const response = await axios.get(`http://127.0.0.1:8000/api/ventas/${expandedVentaId}/`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setVentaDetails(response.data);
      setObservacionVentaText('');
      setShowObservacionVentaModal(false);
    } catch (error) {
      console.error('Error al agregar observación venta:', error);
      setErrorMessage('Error al agregar la observación de la venta.');
    }
  };

  const handleAddRemision = async () => {
    const token = localStorage.getItem("accessToken");
    try {
      await axios.post(
        `http://127.0.0.1:8000/api/ventas/${expandedVentaId}/remisiones/`,
        { codigo: remisionData.codigo, fecha: remisionData.fecha },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      const response = await axios.get(`http://127.0.0.1:8000/api/ventas/${expandedVentaId}/`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setVentaDetails(response.data);
      setRemisionData({ codigo: '', fecha: '' });
      setShowRemisionModal(false);
    } catch (error) {
      console.error('Error al agregar remisión:', error);
      setErrorMessage('Error al agregar la remisión.');
    }
  };

  const handleEditVenta = () => {
    navigate(`/EditarVenta/${expandedVentaId}`);
  };

  return (
    <div className="ventas-container">
      {errorMessage && <div className="error-message">{errorMessage}</div>}
      <div className="ventas-header">
        <div className="filters">
          <select
            value={selectedMonthYear}
            onChange={(e) => {
              setSelectedMonthYear(e.target.value);
              setCurrentPage(1);
            }}
          >
            <option value="">Elegir mes</option>
            {mesesAnios.map((mesAnio) => (
              <option key={mesAnio} value={mesAnio}>{mesAnio}</option>
            ))}
          </select>
          <select
            value={selectedVendedor}
            onChange={(e) => {
              setSelectedVendedor(e.target.value);
              setCurrentPage(1);
            }}
          >
            <option value="">Vendedor</option>
            {vendedores.map((vendedor) => (
              <option key={vendedor.id} value={vendedor.id}>{vendedor.first_name}</option>
            ))}
          </select>
          <select
            value={selectedEstado}
            onChange={(e) => {
              setSelectedEstado(e.target.value);
              setCurrentPage(1);
            }}
          >
            <option value="">Estado</option>
            {estados.map((estado) => (
              <option key={estado} value={estado}>{capitalizeEstado(estado)}</option>
            ))}
          </select>
        </div>
        <div className="search-section">
          <input
            type="text"
            className="search-input"
            placeholder="Buscar por Cliente o OC"
            value={searchTerm}
            onChange={(e) => {
              setSearchTerm(e.target.value);
              setCurrentPage(1);
            }}
          />
          <button className="export-button" onClick={exportVentas}>Exportar</button>
          <button className="new-venta-button" onClick={() => navigate('/nuevaVenta')}>Nueva venta</button>
        </div>
      </div>

      <table className="ventas-table">
        <thead>
          <tr>
            <th className="th-oc">O.C.</th>
            <th className="th-fecha">Fecha</th>
            <th className="th-vendedor">Vendedor</th>
            <th className="th-cliente">Cliente</th>
            <th className="th-valor">Abono</th>
            <th className="th-valor">Saldo</th>
            <th className="th-valor">Valor</th>
            <th className="th-fecha">Entrega</th>
            <th className="th-estado">Pedido</th>
            <th className="th-estado">Estado</th>
            <th className="th-accion"></th>
          </tr>
        </thead>
        <tbody>
          {isLoading ? (
            <tr>
              <td colSpan="11">
                <div className="loader-container">
                  <div className="loader"></div>
                </div>
              </td>
            </tr>
          ) : filteredVentas.length > 0 ? (
            filteredVentas.map((venta) => (
              <React.Fragment key={venta.id_venta}>
                <tr>
                  <td className="td-oc">{venta.id_venta}</td>
                  <td className="td-fecha">{formatDate(venta.fecha_venta)}</td>
                  <td className="td-vendedor">{venta.vendedor}</td>
                  <td className="td-cliente">{venta.cliente}</td>
                  <td className="td-valor">{formatCurrency(venta.abono)}</td>
                  <td className="td-valor">{formatCurrency(venta.saldo)}</td>
                  <td className="td-valor">{formatCurrency(venta.valor)}</td>
                  <td className="td-fecha">{formatDate(venta.fecha_entrega)}</td>
                  <td className="td-estado">
                    <span className={`status-circle ${venta.pedido?.toLowerCase().replace(' ', '-')}`}></span>
                    {venta.pedido}
                  </td>
                  <td className="td-estado">
                    <span className={`status-circle ${venta.estado?.toLowerCase()}`}></span>
                    {capitalizeEstado(venta.estado)}
                  </td>
                  <td className="td-accion">
                    <button className="expand-button" onClick={() => handleExpandVenta(venta.id_venta)}>
                      <FaChevronDown />
                    </button>
                  </td>
                </tr>
                {expandedVentaId === venta.id_venta && (
                  <tr className="expanded-row">
                    <td colSpan="11">
                      {loadingDetails ? (
                        <div className="loading-details">
                          <div className="loader"></div>
                        </div>
                      ) : ventaDetails ? (
                        <div className="venta-detalles">
                          <div className="detalles-container">
                            <div className="detalles-cliente card">
                              <h4>Datos del Cliente</h4>
                              <div className="cliente-data-columns">
                                <div className="column">
                                  <p><strong>Nombre:</strong> {ventaDetails.cliente.nombre}</p>
                                  <p><strong>Cédula:</strong> {ventaDetails.cliente.cedula}</p>
                                  <p><strong>Correo:</strong> {ventaDetails.cliente.correo}</p>
                                  <p><strong>Teléfono 2:</strong> {ventaDetails.cliente.telefono2 || '-'}</p>
                                </div>
                                <div className="column">
                                  <p><strong>Ciudad:</strong> {ventaDetails.cliente.ciudad || '-'}</p>
                                  <p><strong>Dirección:</strong> {ventaDetails.cliente.direccion || '-'}</p>
                                  <p><strong>Teléfono 1:</strong> {ventaDetails.cliente.telefono1 || '-'}</p>
                                </div>
                              </div>
                              <div className="button-container">
                                <button className="add-button" onClick={() => setShowObservacionClienteModal(true)}>
                                  + Agregar Observación
                                </button>
                              </div>
                            </div>
                            <div className="detalles-pagos card">
                              <h4>Pagos</h4>
                              {ventaDetails.recibos.length > 0 ? (
                                <ul>
                                  {ventaDetails.recibos.map((recibo) => (
                                    <li key={recibo.id}>
                                      RC: {recibo.id}, {recibo.metodo_pago}: {formatCurrency(recibo.valor)} ({recibo.estado})
                                    </li>
                                  ))}
                                </ul>
                              ) : (
                                <p>– Aun no se registran pagos.</p>
                              )}
                              <hr className="separator-line" />
                              <p><strong>Remisiones:</strong> {ventaDetails.remisiones.length > 0 ? ventaDetails.remisiones.map(r => r.codigo).join(', ') : '-'}</p>
                              <div className="button-container">
                                <button className="add-button" onClick={() => setShowRemisionModal(true)}>
                                  + Agregar Remisión
                                </button>
                              </div>
                            </div>
                          </div>
                          <div className="observaciones-container">
                            <div className="observaciones-cliente card">
                              <h4>Observaciones Cliente</h4>
                              {ventaDetails.observaciones_cliente.length > 0 ? (
                                <ul>
                                  {ventaDetails.observaciones_cliente.map((obs) => (
                                    <li key={obs.id}>{obs.texto}</li>
                                  ))}
                                </ul>
                              ) : (
                                <p>– Aun no se registran observaciones del cliente.</p>
                              )}
                            </div>
                            <div className="observaciones-venta card">
                              <h4>Observaciones Venta</h4>
                              {ventaDetails.observaciones_venta.length > 0 ? (
                                <ul>
                                  {ventaDetails.observaciones_venta.map((obs) => (
                                    <li key={obs.id}>{obs.texto}</li>
                                  ))}
                                </ul>
                              ) : (
                                <p>– Aun no se registran observaciones de la venta.</p>
                              )}
                            </div>
                          </div>
                          <div className="ordenes-pedido-section">
                            <div className="ordenes-header">
                              <h4>Órdenes de Pedido</h4>
                              <div className="button-group">
                                <button className="add-button" onClick={() => setShowObservacionVentaModal(true)}>
                                  + Observación Venta
                                </button>
                                <button className="edit-venta-button" onClick={handleEditVenta}>
                                  Editar Venta
                                </button>
                              </div>
                            </div>
                            <table className="ordenes-table">
                              <thead>
                                <tr>
                                  <th>O.P.</th>
                                  <th>Proveedor</th>
                                  <th>Fecha Pedido</th>
                                  <th>Fecha Llegada</th>
                                  <th>Tela</th>
                                  <th>Estado</th>
                                </tr>
                              </thead>
                              <tbody>
                                {ventaDetails.ordenes_pedido.map((orden) => (
                                  <tr key={orden.id}>
                                    <td>{orden.id}</td>
                                    <td>{orden.proveedor?.nombre_empresa || '-'}</td>
                                    <td>{formatDate(orden.fecha_creacion)}</td>
                                    <td>{formatDate(orden.fecha_esperada)}</td>
                                    <td>{orden.tela || '-'}</td>
                                    <td>{orden.estado || '-'}</td>
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                          </div>
                        </div>
                      ) : null}
                    </td>
                  </tr>
                )}
              </React.Fragment>
            ))
          ) : (
            <tr>
              <td colSpan="11">No hay ventas para mostrar.</td>
            </tr>
          )}
        </tbody>
      </table>

      <div className="pagination-container">
        <button disabled={currentPage === 1} onClick={() => setCurrentPage(currentPage - 1)}>Anterior</button>
        <span>{currentPage} / {totalPages}</span>
        <button disabled={currentPage === totalPages} onClick={() => setCurrentPage(currentPage + 1)}>Siguiente</button>
      </div>

      {showObservacionClienteModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <h3>Observación a Cliente #{ventaDetails.cliente.id}</h3>
              <button className="modal-close" onClick={() => setShowObservacionClienteModal(false)}>×</button>
            </div>
            <textarea
              value={observacionClienteText}
              onChange={(e) => setObservacionClienteText(e.target.value)}
              placeholder="Escribe la observación aquí..."
              required
            />
            <button className="modal-submit" onClick={handleAddObservacionCliente}>Guardar</button>
          </div>
        </div>
      )}

      {showObservacionVentaModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <h3>Observación a Venta #{expandedVentaId}</h3>
              <button className="modal-close" onClick={() => setShowObservacionVentaModal(false)}>×</button>
            </div>
            <textarea
              value={observacionVentaText}
              onChange={(e) => setObservacionVentaText(e.target.value)}
              placeholder="Escribe la observación aquí..."
              required
            />
            <button className="modal-submit" onClick={handleAddObservacionVenta}>Guardar</button>
          </div>
        </div>
      )}

      {showRemisionModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <h3>Remisión a Venta #{expandedVentaId}</h3>
              <button className="modal-close" onClick={() => setShowRemisionModal(false)}>×</button>
            </div>
            <div className="form-group">
              <label>Número de Remisión:</label>
              <input
                type="text"
                value={remisionData.codigo}
                onChange={(e) => setRemisionData({ ...remisionData, codigo: e.target.value })}
              />
            </div>
            <div className="form-group">
              <label>Venta:</label>
              <input
                type="text"
                value={`Venta #${expandedVentaId}`}
                disabled
              />
            </div>
            <div className="form-group">
              <label>Fecha:</label>
              <input
                type="date"
                value={remisionData.fecha}
                onChange={(e) => setRemisionData({ ...remisionData, fecha: e.target.value })}
              />
            </div>
            <button className="modal-submit" onClick={handleAddRemision}>Guardar</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Ventas;



// ==================== pages/CrearPedidoPage.jsx ====================

import { useState, useEffect, useContext } from "react";
import { useNavigate } from "react-router-dom";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import API from "../services/api";
import { AppContext } from "../AppContext";
import "./CrearPedidoPage.css";
import html2canvas from "html2canvas";
import logoFinal from "../assets/logoFinal.png";
import { IoIosClose } from "react-icons/io";

function CrearPedidoPage() {
  const { proveedores, usuario: user, isLoading: contextLoading } = useContext(AppContext);
  const navigate = useNavigate();
  const token = localStorage.getItem("accessToken");
  const queryClient = useQueryClient();

  const [proveedorId, setProveedorId] = useState("");
  const { data: referencias = [], isLoading: referenciasLoading } = useQuery({
    queryKey: ["referencias", proveedorId],
    queryFn: () => API.get(`referencias/?proveedor=${proveedorId}`).then((res) => res.data),
    enabled: !!proveedorId,
    staleTime: 5 * 60 * 1000,
  });

  // ==================== INICIO DE LA CORRECCIÓN ====================
  // Se restaura la lógica original para procesar la respuesta de la API de ventas pendientes.
  // Esto soluciona el error "Objects are not valid as a React child".
  const { data: ventasPendientes = [], isLoading: ventasLoading, error: ventasError } = useQuery({
    queryKey: ["ventasPendientes"],
    queryFn: () =>
      API.get("ventas/pendientes/", {
        headers: { Authorization: `Bearer ${token}` },
        params: { estado: "pendiente" },
      }).then((res) => {
        const results = res.data.results || res.data || [];
        // Se asegura de que cada 'venta' sea un objeto y tenga 'id_venta' antes de mapear.
        const ids = results
          .filter((venta) => venta && typeof venta === 'object' && venta.id_venta)
          .map((venta) => venta.id_venta);
        return ids;
      }),
    enabled: !!token,
    staleTime: 5 * 60 * 1000,
  });
  // ==================== FIN DE LA CORRECCIÓN ====================

  // Se restaura la estructura del estado original para que coincida con los campos del formulario.
  const [pedido, setPedido] = useState({
    proveedor: "",
    fecha: "",
    nota: "",
    productos: [{ cantidad: "", referencia: "", descripcion: "" }],
    ordenCompra: "",
  });
  const [numeroOP, setNumeroOP] = useState(null);
  const [llevaTela, setLlevaTela] = useState(false);

  const createOrderMutation = useMutation({
    mutationFn: (newOrder) =>
      API.post("ordenes/", newOrder, { headers: { Authorization: `Bearer ${token}` } }),
    onSuccess: (response) => {
      setNumeroOP(response.data.id);
      queryClient.invalidateQueries({ queryKey: ['ordenes'] });
    },
    onError: (error) => {
      const errorMsg = error.response?.data?.detalles || error.response?.data?.error || "Error al crear la orden.";
      alert(`Error: ${JSON.stringify(errorMsg)}`);
      console.error("Error creating order:", error.response);
    },
  });

  const getFormattedDate = () => {
    const today = new Date();
    const day = String(today.getDate()).padStart(2, "0");
    const monthNames = ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"];
    const month = monthNames[today.getMonth()];
    const year = today.getFullYear();
    return `${day}-${month}-${year}`;
  };

  const formatDate = (date) => {
    if (!date) return "";
    const [year, month, day] = date.split("-");
    const localDate = new Date(year, month - 1, day);
    const formattedDay = String(localDate.getDate()).padStart(2, "0");
    const monthNames = ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"];
    const formattedMonth = monthNames[localDate.getMonth()];
    const formattedYear = localDate.getFullYear();
    return `${formattedDay}-${formattedMonth}-${year}`;
  };

  const handleProveedorChange = (e) => {
    const id = e.target.value;
    setProveedorId(id);
    setPedido({ ...pedido, proveedor: id, productos: [{ cantidad: "", referencia: "", descripcion: "" }] });
  };

  const handleChange = (e, index, field) => {
    if (field) {
      const updatedProductos = [...pedido.productos];
      updatedProductos[index][field] = e.target.value;
      setPedido({ ...pedido, productos: updatedProductos });
    } else {
      setPedido({ ...pedido, [e.target.name]: e.target.value });
    }
  };

  const handleAddProduct = () => {
    setPedido({
      ...pedido,
      productos: [...pedido.productos, { cantidad: "", referencia: "", descripcion: "" }],
    });
  };

  const handleRemoveProduct = (index) => {
    const updatedProductos = pedido.productos.filter((_, i) => i !== index);
    setPedido({ ...pedido, productos: updatedProductos });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // Se mapean los nombres del estado a los esperados por la API en la mutación.
    createOrderMutation.mutate({
      proveedor: pedido.proveedor,
      fecha_esperada: pedido.fecha,
      notas: pedido.nota,
      detalles: pedido.productos.map((producto) => ({
        cantidad: producto.cantidad,
        referencia: producto.referencia,
        especificaciones: producto.descripcion,
      })),
      tela: llevaTela ? "Por pedir" : "Sin tela",
      venta: pedido.ordenCompra,
    });
  };

  useEffect(() => {
    if (numeroOP) {
      const renderImage = async () => {
        const pedidoPreview = document.getElementById("pedido-preview");
        if (pedidoPreview) {
          pedidoPreview.style.display = "block";
          const canvas = await html2canvas(pedidoPreview, {
            backgroundColor: "#ffffff",
            scale: 2,
            useCORS: true,
          });
          pedidoPreview.style.display = "none";

          const image = canvas.toDataURL("image/png");
          const link = document.createElement("a");
          link.href = image;
          link.download = `pedido_${numeroOP}.png`;
          link.click();

          navigate("/ordenes");
        }
      };
      renderImage();
    }
  }, [numeroOP, navigate]);

  const isInitialLoading = contextLoading || ventasLoading;

  if (isInitialLoading) {
    return (
      <div className="crear-pedido-loader">
        <div className="spinner"></div>
        <p>Cargando datos...</p>
      </div>
    );
  }

  return (
    <div className="crear-pedido-page">
      <main>
        <div className="botonesContainer">
          <button className="cancelarBtn" onClick={() => navigate(-1)} aria-label="Cancelar y volver atrás">
            Cancelar
          </button>
        </div>
        <form className="formPedido" onSubmit={handleSubmit}>
          <div className="form-container">
            <h2 className="tituloForm">Crear Nuevo Pedido</h2>
            <div className="form-group">
              <label>Proveedor:</label>
              <select
                name="proveedor"
                value={pedido.proveedor}
                onChange={handleProveedorChange}
                required
              >
                <option value="">- Elige un proveedor -</option>
                {proveedores.map((proveedor) => (
                  <option key={proveedor.id} value={proveedor.id}>
                    {proveedor.nombre_empresa}
                  </option>
                ))}
              </select>
            </div>
            <div className="form-group">
              <label>Orden de compra:</label>
              {ventasError ? (
                <p className="error">Error al cargar órdenes de compra: {ventasError.message}</p>
              ) : ventasPendientes.length === 0 ? (
                <p>No hay órdenes de compra pendientes</p>
              ) : (
                <select
                  name="ordenCompra"
                  value={pedido.ordenCompra}
                  onChange={(e) => handleChange(e)}
                  required
                >
                  <option value="">- Selecciona una orden de compra -</option>
                  {ventasPendientes.map((ventaId) => (
                    <option key={ventaId} value={ventaId}>
                      {ventaId}
                    </option>
                  ))}
                </select>
              )}
            </div>
            <div className="form-group">
              <label>Fecha esperada:</label>
              <input
                type="date"
                name="fecha"
                value={pedido.fecha}
                onChange={(e) => handleChange(e)}
                required
              />
            </div>
            <div className="form-group">
              <label className="labelTelas">Tela:</label>
              <input
                type="checkbox"
                checked={llevaTela}
                onChange={(e) => setLlevaTela(e.target.checked)}
                className="checkbox-tela"
              />
              <p className="textoTela">Incluye tela</p>
            </div>
            <h3 className="tituloProductos">Productos:</h3>
            {pedido.productos.map((producto, index) => (
              <div key={index} className="producto-group">
                {index > 0 && (
                  <button
                    type="button"
                    className="remove-product-btn"
                    onClick={() => handleRemoveProduct(index)}
                    aria-label="Eliminar producto"
                  >
                    <IoIosClose />
                  </button>
                )}
                <div className="producto-row">
                  <input
                    type="number"
                    value={producto.cantidad}
                    onChange={(e) => handleChange(e, index, "cantidad")}
                    required
                    placeholder="Cantidad"
                    className="input-cantidad"
                  />
                  <select
                    value={producto.referencia}
                    onChange={(e) => handleChange(e, index, "referencia")}
                    required
                    className="select-referencia"
                    disabled={referenciasLoading || !proveedorId}
                  >
                    <option value="">- Selecciona una referencia -</option>
                    {referencias.map((ref) => (
                      <option key={ref.id} value={ref.id}>
                        {ref.nombre}
                      </option>
                    ))}
                  </select>
                </div>
                <textarea
                  value={producto.descripcion}
                  onChange={(e) => handleChange(e, index, "descripcion")}
                  placeholder="Descripción del producto"
                  className="textarea-descripcion"
                />
              </div>
            ))}
            <div className="form-buttons">
              <button type="button" className="agregarProductoBtn" onClick={handleAddProduct}>
                Agregar producto
              </button>
            </div>
            <div className="form-group nota-group">
              <label>Observación:</label>
              <textarea
                name="nota"
                value={pedido.nota}
                onChange={(e) => handleChange(e)}
                placeholder="Observación general del pedido"
                className="textarea-nota"
              />
            </div>
            <div className="form-buttons">
              <button type="submit" className="enviarBtn" disabled={createOrderMutation.isLoading}>
                {createOrderMutation.isLoading ? "Enviando..." : "Enviar"}
              </button>
            </div>
          </div>
        </form>
        <div id="pedido-preview" style={{ display: "none" }}>
          <div className="preview-container">
            <div className="preview-header">
              <img src={logoFinal} className="logoPedido" alt="Logo Lottus" />
              <div className="numPedido">
                <h2>Orden de Pedido</h2>
                <p className="numeroOP">No. {numeroOP || "..."}</p>
              </div>
            </div>
            <div className="preview-info">
              <div className="info-column">
                <p>
                  <strong>Proveedor:</strong>{" "}
                  {proveedores.length > 0 && pedido.proveedor
                    ? proveedores.find((p) => String(p.id) === String(pedido.proveedor))?.nombre_empresa || "No seleccionado"
                    : "Cargando..."}
                </p>
                <p>
                  <strong>Vendedor:</strong> {user ? `${user.first_name} ${user.last_name}` : "Cargando..."}
                </p>
                <p>
                  <strong>Orden de compra:</strong> {pedido.ordenCompra || "No especificado"}
                </p>
              </div>
              <div className="info-column">
                <p>
                  <strong>Fecha pedido:</strong> {getFormattedDate()}
                </p>
                <p>
                  <strong>Fecha entrega:</strong> {formatDate(pedido.fecha)}
                </p>
              </div>
            </div>
            <h3 className="preview-productos-title">Productos:</h3>
            <table className="preview-productos-table">
              <thead>
                <tr>
                  <th>Cantidad</th>
                  <th>Referencia</th>
                  <th>Descripción</th>
                </tr>
              </thead>
              <tbody>
                {pedido.productos.map((producto, index) => (
                  <tr key={index}>
                    <td>{producto.cantidad}</td>
                    <td>
                      {referencias.length > 0 && producto.referencia
                        ? referencias.find((r) => String(r.id) === String(producto.referencia))?.nombre || "No seleccionado"
                        : "Cargando..."}
                    </td>
                    <td className="desc-preview">{producto.descripcion}</td>
                  </tr>
                ))}
              </tbody>
            </table>
            <div className="preview-nota">
              <h3>Observación:</h3>
              <p
                dangerouslySetInnerHTML={{
                  __html: pedido.nota ? pedido.nota.replace(/\n/g, "<br />") : "Sin observaciones",
                }}
              />
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}

export default CrearPedidoPage;


// ==================== pages/RecibosCaja.jsx ====================

import React, { useState, useEffect } from 'react';
import './RecibosCaja.css';
import axios from 'axios';
import * as XLSX from 'xlsx';

const RecibosCaja = () => {
  const [recibosData, setRecibosData] = useState([]);
  const [filteredRecibosData, setFilteredRecibosData] = useState([]);
  const [fechaInicioRC, setFechaInicioRC] = useState('');
  const [fechaFinRC, setFechaFinRC] = useState('');
  const [medioPagoRC, setMedioPagoRC] = useState('');
  const [queryRC, setQueryRC] = useState('');
  const [searchParams, setSearchParams] = useState({ fecha_inicio: '', fecha_fin: '', medio_pago: '', query: '' });
  const [newRC, setNewRC] = useState({ id: '', fecha: '', venta: '', metodo_pago: '', valor: '', nota: '' });
  const [isCreatingRC, setIsCreatingRC] = useState(false);
  const [ventas, setVentas] = useState([]);
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [selectedRecibo, setSelectedRecibo] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const pageSize = 30;
  const [isLoading, setIsLoading] = useState(true);
  const [errorMessage, setErrorMessage] = useState('');

  const mediosPago = ['Efectivo', 'Davivienda', 'Bancolombia', 'Otro'];

  // Función para formatear valores monetarios como $3.000.000
  const formatCurrency = (value) => {
    const roundedValue = Math.round(value);
    return `$${roundedValue.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.')}`;
  };

  // ==================== INICIO DE CORRECCIÓN FORMATO DE FECHA ====================
  const formatDate = (dateStr) => {
    if (!dateStr) return '-';
    // Se añade T00:00:00 para asegurar que la fecha se interprete en la zona horaria local y no en UTC.
    const date = new Date(dateStr + 'T00:00:00');
    const day = String(date.getDate()).padStart(2, '0');
    const monthNames = ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"];
    const month = monthNames[date.getMonth()];
    const year = date.getFullYear();
    return `${day}-${month}-${year}`;
  };
  // ==================== FIN DE CORRECCIÓN FORMATO DE FECHA ====================

  useEffect(() => {
    const fetchVentas = async () => {
      const token = localStorage.getItem("accessToken");
      try {
        const response = await axios.get('http://127.0.0.1:8000/api/ventas/', {
          headers: { Authorization: `Bearer ${token}` }
        });
        setVentas(response.data.results || []);
      } catch (error) {
        console.error('Error cargando ventas:', error);
        setErrorMessage('Error al cargar las ventas.');
      }
    };
    fetchVentas();
  }, []);

  useEffect(() => {
    fetchData({ page_size: pageSize, page: currentPage });
  }, [currentPage]);

  const fetchData = async (params) => {
    setIsLoading(true);
    const token = localStorage.getItem("accessToken");
    try {
      const response = await axios.get('http://127.0.0.1:8000/api/recibos/', {
        headers: { Authorization: `Bearer ${token}` },
        params
      });

      setRecibosData(response.data.results || []);
      setTotalPages(Math.ceil(response.data.count / pageSize));
      setFilteredRecibosData(response.data.results || []);
    } catch (error) {
      console.error('Error cargando datos de Recibos de Caja:', error);
      setErrorMessage('Error al cargar los datos de Recibos de Caja.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSearch = () => {
    const params = { page_size: pageSize, page: 1 };
    if (fechaInicioRC) params.fecha_inicio = fechaInicioRC;
    if (fechaFinRC) params.fecha_fin = fechaFinRC;
    if (medioPagoRC) params.medio_pago = medioPagoRC;
    if (queryRC) params.query = queryRC;

    setSearchParams(params);
    setCurrentPage(1);
    fetchData(params);
  };

  const exportData = async () => {
    const token = localStorage.getItem("accessToken");
    try {
      const response = await axios.get('http://127.0.0.1:8000/api/recibos/?page_size=1000', {
        headers: { Authorization: `Bearer ${token}` }
      });
      const data = response.data.results || [];

      const worksheet = XLSX.utils.json_to_sheet(data);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, 'Recibos de Caja');
      XLSX.writeFile(workbook, 'recibos-caja.xlsx');
    } catch (error) {
      console.error('Error al exportar datos de Recibos de Caja:', error);
      setErrorMessage('Error al exportar los datos de Recibos de Caja.');
    }
  };

  const handleCreateRC = async () => {
    const token = localStorage.getItem("accessToken");
    try {
      const payload = {
        id: newRC.id,
        fecha: newRC.fecha,
        venta: parseInt(newRC.venta),
        metodo_pago: newRC.metodo_pago,
        valor: parseFloat(newRC.valor),
        nota: newRC.nota || null
      };
      await axios.post('http://127.0.0.1:8000/api/recibos/create/', payload, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setNewRC({ id: '', fecha: '', venta: '', metodo_pago: '', valor: '', nota: '' });
      setIsCreatingRC(false);
      fetchData({ page_size: pageSize, page: 1 });
    } catch (error) {
      console.error('Error al crear recibo de caja:', error);
      if (error.response && error.response.data.error) {
        setErrorMessage(error.response.data.error);
      } else {
        setErrorMessage('Error al crear el recibo de caja.');
      }
    }
  };

  const handleConfirmRecibo = async () => {
    const token = localStorage.getItem("accessToken");
    try {
      await axios.patch(`http://127.0.0.1:8000/api/recibos/${selectedRecibo.id}/confirmar/`, {}, {
        headers: { Authorization: `Bearer ${token}` }
      });
      fetchData({ page_size: pageSize, page: 1 });
      setShowConfirmModal(false);
      setSelectedRecibo(null);
    } catch (error) {
      console.error('Error al confirmar recibo:', error);
      setErrorMessage('Error al confirmar el recibo.');
    }
  };

  return (
    <div className="recibos-caja-container">
      {errorMessage && <div className="error-message">{errorMessage}</div>}
      <div className="recibos-caja-header">
        <div className="filters">
          <input
            type="text"
            className="search-input"
            placeholder="Buscar por RC o Venta"
            value={queryRC}
            onChange={(e) => setQueryRC(e.target.value)}
          />
          <input
            type="date"
            value={fechaInicioRC}
            onChange={(e) => setFechaInicioRC(e.target.value)}
          />
          <input
            type="date"
            value={fechaFinRC}
            onChange={(e) => setFechaFinRC(e.target.value)}
          />
          <select
            value={medioPagoRC}
            onChange={(e) => setMedioPagoRC(e.target.value)}
          >
            <option value="">Elegir medio de pago</option>
            {mediosPago.map((medio) => (
              <option key={medio} value={medio}>{medio}</option>
            ))}
          </select>
          <button className="search-button" onClick={handleSearch}>Buscar</button>
        </div>
        <div className="actions">
          <button className="export-button" onClick={exportData}>Exportar</button>
          <button className="new-button" onClick={() => setIsCreatingRC(true)}>Nuevo</button>
        </div>
      </div>
      <table className="recibos-caja-table">
        <thead>
          <tr>
            <th className="rc-th-rc">RC</th>
            <th className="rc-th-fecha">Fecha</th>
            <th className="rc-th-venta">Venta</th>
            <th className="rc-th-metodo">Método de Pago</th>
            <th className="rc-th-estado">Estado</th>
            <th className="rc-th-valor">Valor</th>
            <th className="rc-th-nota">Nota</th>
            <th className="rc-th-acciones">Acciones</th>
          </tr>
        </thead>
        <tbody>
          {isLoading ? (
            <tr>
              <td colSpan="8">
                <div className="loader-container">
                  <div className="loader"></div>
                </div>
              </td>
            </tr>
          ) : filteredRecibosData.length > 0 ? (
            filteredRecibosData.map((item) => (
              <tr key={item.id}>
                <td className="rc-td-rc">{item.id}</td>
                <td className="rc-td-fecha">{formatDate(item.fecha)}</td>
                <td className="rc-td-venta">{item.venta}</td>
                <td className="rc-td-metodo">{item.metodo_pago}</td>
                <td className="rc-td-estado">{item.estado}</td>
                <td className="rc-td-valor">{formatCurrency(item.valor)}</td>
                <td className="rc-td-nota">{item.nota || '-'}</td>
                <td className="rc-td-acciones">
                  {item.estado === 'Pendiente' && (
                    <button
                      className="action-button confirm"
                      onClick={() => {
                        setSelectedRecibo(item);
                        setShowConfirmModal(true);
                      }}
                    >
                      Confirmar
                    </button>
                  )}
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="8">No hay recibos de caja para mostrar.</td>
            </tr>
          )}
        </tbody>
      </table>
      {isCreatingRC && (
        <CreateRCModal
          newRC={newRC}
          setNewRC={setNewRC}
          ventas={ventas}
          mediosPago={mediosPago}
          onSave={handleCreateRC}
          onClose={() => setIsCreatingRC(false)}
        />
      )}
      {showConfirmModal && selectedRecibo && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <h3>Confirmando RC #{selectedRecibo.id}</h3>
              <button className="modal-close" onClick={() => setShowConfirmModal(false)}>×</button>
            </div>
            <p><strong>Método de pago:</strong> {selectedRecibo.metodo_pago}</p>
            <p><strong>Valor:</strong> {formatCurrency(selectedRecibo.valor)}</p>
            <p><strong>Nota:</strong> {selectedRecibo.nota || 'Nota del recibo de caja'}</p>
            <div className="modal-actions">
              <button className="modal-cancel" onClick={() => setShowConfirmModal(false)}>Cancelar</button>
              <button className="modal-submit" onClick={handleConfirmRecibo}>Confirmar recibo</button>
            </div>
          </div>
        </div>
      )}
      <div className="pagination-container">
        <button disabled={currentPage === 1} onClick={() => setCurrentPage(currentPage - 1)}>Anterior</button>
        <span>{currentPage} / {totalPages}</span>
        <button disabled={currentPage === totalPages} onClick={() => setCurrentPage(currentPage + 1)}>Siguiente</button>
      </div>
    </div>
  );
};

// Modal Component for Creating a Recibo de Caja
const CreateRCModal = ({ newRC, setNewRC, ventas, mediosPago, onSave, onClose }) => {
  const handleChange = (e) => {
    setNewRC({ ...newRC, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave();
  };

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <div className="modal-header">
          <h3>Nuevo recibo de caja</h3>
          <button className="modal-close" onClick={onClose}>×</button>
        </div>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>RC:</label>
            <input
              type="number"
              name="id"
              value={newRC.id}
              onChange={handleChange}
              required
              placeholder="Ingresa el ID del recibo"
            />
          </div>
          <div className="form-group">
            <label>Fecha:</label>
            <input
              type="date"
              name="fecha"
              value={newRC.fecha}
              onChange={handleChange}
              required
            />
          </div>
          <div className="form-group">
            <label>Venta:</label>
            <select
              name="venta"
              value={newRC.venta}
              onChange={handleChange}
              required
            >
              <option value="">Elegir venta</option>
              {ventas.map((venta) => (
                <option key={venta.id_venta} value={venta.id_venta}>Venta #{venta.id_venta}</option>
              ))}
            </select>
          </div>
          <div className="form-group">
            <label>Medio de pago:</label>
            <select
              name="metodo_pago"
              value={newRC.metodo_pago}
              onChange={handleChange}
              required
            >
              <option value="">Elegir medio de pago</option>
              {mediosPago.map((medio) => (
                <option key={medio} value={medio}>{medio}</option>
              ))}
            </select>
          </div>
          <div className="form-group">
            <label>Valor:</label>
            <input
              type="number"
              name="valor"
              value={newRC.valor}
              onChange={handleChange}
              required
              min="0"
              step="0.01"
            />
          </div>
          <div className="form-group">
            <label>Nota:</label>
            <textarea
              name="nota"
              value={newRC.nota}
              onChange={handleChange}
              placeholder="Escribe una nota (opcional)"
            />
          </div>
          <button type="submit" className="modal-submit">Crear</button>
        </form>
      </div>
    </div>
  );
};

export default RecibosCaja;



// ==================== pages/OrdenesPage.jsx ====================

import React, { useState, useEffect, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import * as XLSX from 'xlsx';
import { FaChevronDown } from 'react-icons/fa';
import './OrdenesPage.css';
import { AppContext } from '../AppContext';

const OrdenesPage = () => {
  const { proveedores, usuario: user } = useContext(AppContext);
  const navigate = useNavigate();
  const [ordenes, setOrdenes] = useState([]);
  const [filteredOrdenes, setFilteredOrdenes] = useState([]);
  const [vendedores, setVendedores] = useState([]);
  const [selectedProveedor, setSelectedProveedor] = useState('');
  const [selectedVendedor, setSelectedVendedor] = useState('');
  const [selectedEstado, setSelectedEstado] = useState('en_proceso');
  const [expandedOrderId, setExpandedOrderId] = useState(null);
  const [orderDetails, setOrderDetails] = useState(null);
  const [formCosto, setFormCosto] = useState({});
  const [formEstado, setFormEstado] = useState({});
  const [formTela, setFormTela] = useState({});
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [isLoading, setIsLoading] = useState(true);
  const [loadingDetails, setLoadingDetails] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');

  const pageSize = 30;
  const token = localStorage.getItem('accessToken');

  const estados = [
    { value: 'en_proceso', label: 'En proceso' },
    { value: 'recibido', label: 'Recibido' },
    { value: 'anulado', label: 'Anulado' },
  ];

  const telas = [
    'Por pedir',
    'Sin tela',
    'Por llegar',
    'En fabrica',
    'En Lottus'
  ];

  const formatDate = (dateStr) => {
    if (!dateStr) return '-';
    const [year, month, day] = dateStr.split('-');
    return `${day}-${month}-${year}`;
  };

  const formatNumber = (number) => {
    if (number === null || number === undefined) return '$0';
    let cleanedNumber = typeof number === 'string' ? number.replace(/[^0-9.-]+/g, '') : number;
    const num = parseFloat(cleanedNumber);
    return isNaN(num) ? `$${Math.floor(num).toLocaleString('es-CO')}` : `$${Math.floor(num).toLocaleString('es-CO')}`;
  };

  const capitalizeEstado = (estado) => {
    if (!estado) return '';
    if (estado.toLowerCase() === 'en_proceso') return 'En proceso';
    return estado.charAt(0).toUpperCase() + estado.slice(1).toLowerCase();
  };

  useEffect(() => {
    const fetchVendedores = async () => {
      try {
        const response = await axios.get('http://127.0.0.1:8000/api/vendedores/', {
          headers: { Authorization: `Bearer ${token}` }
        });
        setVendedores(response.data.filter(v => v.first_name && v.first_name.trim() !== ''));
      } catch (error) {
        setErrorMessage('Error al cargar los vendedores.');
      }
    };
    fetchVendedores();
  }, [token]);

  useEffect(() => {
    const fetchOrdenes = async () => {
      setIsLoading(true);
      try {
        const params = {};
        if (selectedProveedor) params.id_proveedor = selectedProveedor;
        if (selectedVendedor) params.id_vendedor = selectedVendedor;
        if (selectedEstado) params.estado = selectedEstado;

        const response = await axios.get('http://127.0.0.1:8000/api/listar-pedidos/', {
          headers: { Authorization: `Bearer ${token}` },
          params
        });

        let fetchedOrdenes = Array.isArray(response.data) ? response.data.filter(orden => orden.id) : [];
        fetchedOrdenes = fetchedOrdenes.sort((a, b) => b.id - a.id);
        setOrdenes(fetchedOrdenes);

        const startIndex = (currentPage - 1) * pageSize;
        const paginatedOrdenes = fetchedOrdenes.slice(startIndex, startIndex + pageSize);
        setFilteredOrdenes(paginatedOrdenes);
        setTotalPages(Math.ceil(fetchedOrdenes.length / pageSize) || 1);
      } catch (error) {
        setErrorMessage('Error al cargar las órdenes.');
        setOrdenes([]);
        setFilteredOrdenes([]);
      } finally {
        setIsLoading(false);
      }
    };
    fetchOrdenes();
  }, [currentPage, selectedProveedor, selectedVendedor, selectedEstado, token]);

  const handleExpandOrder = async (orderId) => {
    if (expandedOrderId === orderId) {
      setExpandedOrderId(null);
      setOrderDetails(null);
      setFormCosto({});
      setFormEstado({});
      setFormTela({});
      return;
    }

    setExpandedOrderId(orderId);
    setLoadingDetails(true);
    setOrderDetails(null);

    try {
      const response = await axios.get(`http://127.0.0.1:8000/api/detalles-pedido/${orderId}/`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setOrderDetails(response.data);

      const order = ordenes.find(o => o.id === orderId);
      const cleanedCosto = order.costo && typeof order.costo === 'string' 
        ? parseFloat(order.costo.replace(/[^0-9.-]+/g, '')) 
        : order.costo || '';
      setFormCosto({ [orderId]: cleanedCosto });
      setFormEstado({ [orderId]: order.estado || '' });
      setFormTela({ [orderId]: order.tela || '' });
    } catch (error) {
      setErrorMessage('Error al cargar los detalles del pedido.');
    } finally {
      setLoadingDetails(false);
    }
  };

  const handleActualizarPedido = async (id) => {
    const ordenActual = ordenes.find(o => o.id === id);
    const costoInput = formCosto[id];
    const estadoInput = formEstado[id];
    const telaInput = formTela[id];

    const updates = {};
    if (costoInput !== undefined && costoInput !== '' && parseFloat(costoInput) !== parseFloat(ordenActual.costo || 0)) {
      const costo = parseFloat(costoInput);
      if (isNaN(costo)) {
        setErrorMessage('El costo debe ser un número válido.');
        return;
      }
      updates.costo = costo;
    }
    if (estadoInput && estadoInput !== ordenActual.estado) {
      updates.estado = estadoInput;
    }
    if (telaInput && telaInput !== ordenActual.tela) {
      updates.tela = telaInput;
    }

    if (Object.keys(updates).length === 0) {
      setErrorMessage('No hay cambios para actualizar.');
      return;
    }

    try {
      await axios.put(`http://127.0.0.1:8000/api/ordenes/${id}/`, updates, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setOrdenes(prev => prev.map(orden =>
        orden.id === id ? { ...orden, ...updates } : orden
      ));
      setFilteredOrdenes(prev => prev.map(orden =>
        orden.id === id ? { ...orden, ...updates } : orden
      ));
    } catch (error) {
      setErrorMessage('Error al actualizar el pedido.');
    }
  };

  const exportOrdenes = async () => {
    try {
      const response = await axios.get('http://127.0.0.1:8000/api/listar-pedidos/?page_size=1000', {
        headers: { Authorization: `Bearer ${token}` }
      });
      const data = Array.isArray(response.data) ? response.data.filter(orden => orden.id) : [];

      const formattedData = data.map(orden => ({
        'O.P.': orden.id,
        Proveedor: orden.proveedor || 'N/A',
        Vendedor: orden.vendedor || 'N/A',
        Venta: orden.orden_venta || 'N/A',
        'Fecha Pedido': formatDate(orden.fecha_creacion),
        'Fecha Llegada': formatDate(orden.fecha_esperada),
        Estado: orden.estado || 'N/A',
        Tela: orden.tela || 'N/A',
        Nota: orden.notas || '',
        Costo: orden.costo !== null && orden.costo !== undefined ? parseFloat(orden.costo.replace(/[^0-9.-]+/g, '')) : 0,
      }));

      const worksheet = XLSX.utils.json_to_sheet(formattedData);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, 'Ordenes');
      XLSX.writeFile(workbook, 'ordenes.xlsx');
    } catch (error) {
      setErrorMessage('Error al exportar las órdenes.');
    }
  };

  const getEstadoClass = (estado, fechaEsperada) => {
    const today = new Date();
    let fechaEsperadaDate;

    if (fechaEsperada) {
      const [year, month, day] = fechaEsperada.split('-');
      fechaEsperadaDate = new Date(`${year}-${month}-${day}`);
    }

    if (estado === 'en_proceso') {
      if (fechaEsperadaDate && fechaEsperadaDate < today) {
        return 'pendiente';
      }
      return 'pendiente';
    } else if (estado === 'recibido') {
      return 'entregado';
    } else if (estado === 'anulado') {
      return 'anulado';
    }
    return estado;
  };

  const getTelaClass = (tela) => {
    switch (tela) {
      case 'Por pedir': return 'pendiente';
      case 'Sin tela': return 'anulado';
      case 'Por llegar': return 'pendiente';
      case 'En fabrica': return 'entregado';
      case 'En Lottus': return 'archivado';
      default: return 'pendiente';
    }
  };

  return (
    <div className="ordenes-container">
      {errorMessage && <div className="error-message">{errorMessage}</div>}
      <div className="ordenes-header">
        <div className="filters">
          <select value={selectedProveedor} onChange={(e) => { setSelectedProveedor(e.target.value); setCurrentPage(1); setIsLoading(true); }}>
            <option value="">Proveedor</option>
            {proveedores.map((prov) => (<option key={prov.id} value={prov.id}>{prov.nombre_empresa}</option>))}
          </select>
          {(user?.role === 'ADMINISTRADOR' || user?.role === 'AUXILIAR') && (
            <select value={selectedVendedor} onChange={(e) => { setSelectedVendedor(e.target.value); setCurrentPage(1); setIsLoading(true); }}>
              <option value="">Vendedor</option>
              {vendedores.map((vendedor) => (<option key={vendedor.id} value={vendedor.id}>{vendedor.first_name}</option>))}
            </select>
          )}
          <select value={selectedEstado} onChange={(e) => { setSelectedEstado(e.target.value); setCurrentPage(1); setIsLoading(true); }}>
            <option value="">Estado</option>
            {estados.map((estado) => (<option key={estado.value} value={estado.value}>{estado.label}</option>))}
          </select>
        </div>
        <div className="search-section">
          <button className="export-button" onClick={exportOrdenes}>Exportar</button>
          <button className="new-venta-button" onClick={() => navigate('/ordenes/nuevo')}>Crear pedido</button>
        </div>
      </div>

      <table className="ordenes-table">
        <thead>
          <tr>
            <th className="op">O.P.</th>
            <th className="proveedor">Proveedor</th>
            <th className="vendedor">Vendedor</th>
            <th className="venta">Venta</th>
            <th className="fecha-pedido">Fecha Pedido</th>
            <th className="fecha-llegada">Fecha Llegada</th>
            <th className="tela">Tela</th>
            <th className="estado">Estado</th>
            <th className="observacion">Observación</th>
            {(user?.role === 'ADMINISTRADOR' || user?.role === 'AUXILIAR') && <th className="costo">Costo</th>}
            <th className="boton"></th>
          </tr>
        </thead>
        <tbody>
          {isLoading ? (
            <tr>
              <td colSpan={user?.role === 'ADMINISTRADOR' || user?.role === 'AUXILIAR' ? 11 : 10}>
                <div className="loader-container"><div className="loader"></div></div>
              </td>
            </tr>
          ) : filteredOrdenes.length > 0 ? (
            filteredOrdenes.map((orden) => (
              <React.Fragment key={`orden-${orden.id}`}>
                <tr>
                  <td className="op">{orden.id}</td>
                  <td className="proveedor">{orden.proveedor || 'N/A'}</td>
                  <td className="vendedor">{orden.vendedor || 'N/A'}</td>
                  <td className="venta">{orden.orden_venta || 'N/A'}</td>
                  <td className="fecha-pedido">{formatDate(orden.fecha_creacion)}</td>
                  <td className="fecha-llegada">{formatDate(orden.fecha_esperada)}</td>
                  <td className="tela">
                    <span className={`status-circle ${getTelaClass(orden.tela)}`}></span>
                    {orden.tela || 'N/A'}
                  </td>
                  <td className="estado">
                    <span className={`status-circle ${getEstadoClass(orden.estado, orden.fecha_esperada)}`}></span>
                    {capitalizeEstado(orden.estado)}
                  </td>
                  <td className="observacion">{orden.notas}</td>
                  {(user?.role === 'ADMINISTRADOR' || user?.role === 'AUXILIAR') && (
                    <td className="costo">{formatNumber(orden.costo)}</td>
                  )}
                  <td className="boton">
                    <button className="expand-button" onClick={() => handleExpandOrder(orden.id)}>
                      <FaChevronDown />
                    </button>
                  </td>
                </tr>
                {expandedOrderId === orden.id && (
                  <tr className="expanded-row">
                    <td colSpan={user?.role === 'ADMINISTRADOR' || user?.role === 'AUXILIAR' ? 11 : 10}>
                      {loadingDetails ? (
                        <div className="loading-details"><div className="loader"></div></div>
                      ) : orderDetails ? (
                        <div className="ordenes-detalles">
                          {(user?.role === 'ADMINISTRADOR' || user?.role === 'AUXILIAR') && (
                            <div className="formulario-actualizacion card">
                              <h4>Actualizar Pedido</h4>
                              <div className="form-row">
                                <div className="form-group-ordenes"><label>Costo</label><input type="number" value={formCosto[orden.id] || ''} onChange={(e) => setFormCosto({ ...formCosto, [orden.id]: e.target.value })}/></div>
                                <div className="form-group-ordenes">
                                  <label>Estado</label>
                                  <select value={formEstado[orden.id] || ''} onChange={(e) => setFormEstado({ ...formEstado, [orden.id]: e.target.value })}>
                                    <option value="">Seleccionar estado</option>
                                    {estados.map(estado => (<option key={estado.value} value={estado.value}>{estado.label}</option>))}
                                  </select>
                                </div>
                                <div className="form-group-ordenes">
                                  <label>Estado de Tela</label>
                                  <select value={formTela[orden.id] || ''} onChange={(e) => setFormTela({ ...formTela, [orden.id]: e.target.value })}>
                                    <option value="">Seleccionar estado de tela</option>
                                    {telas.map(tela => (<option key={tela} value={tela}>{tela}</option>))}
                                  </select>
                                </div>
                                <div className="form-button"><button className="modal-submit" onClick={() => handleActualizarPedido(orden.id)}>Actualizar</button></div>
                              </div>
                            </div>
                          )}
                          <div className="productos-container card">
                            <h4>Productos</h4>
                            <table className="sub-ordenes-table">
                              <thead><tr><th className="cantidad">Cantidad</th><th className="referencia">Referencia</th><th className="descripcion">Descripción</th></tr></thead>
                              <tbody>
                                {orderDetails.map((producto, index) => (
                                  <tr key={producto.id || index} className={index % 2 === 0 ? 'even-row' : 'odd-row'}>
                                    <td className="cantidad">{producto.cantidad}</td>
                                    <td className="referencia">{producto.referencia}</td>
                                    <td className="descripcion">{producto.especificaciones}</td>
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                          </div>
                          <div className="observaciones-container card">
                            <h4>Observación</h4>
                            <p>{orden.notas || 'Sin observaciones'}</p>
                          </div>
                        </div>
                      ) : null}
                    </td>
                  </tr>
                )}
              </React.Fragment>
            ))
          ) : (
            <tr><td colSpan={user?.role === 'ADMINISTRADOR' || user?.role === 'AUXILIAR' ? 11 : 10}>No hay órdenes para mostrar.</td></tr>
          )}
        </tbody>
      </table>

      <div className="pagination-container">
        <button disabled={currentPage === 1} onClick={() => { setCurrentPage(currentPage - 1); setIsLoading(true); }}>Anterior</button>
        <span>{currentPage} / {totalPages}</span>
        <button disabled={currentPage === totalPages} onClick={() => { setCurrentPage(currentPage + 1); setIsLoading(true); }}>Siguiente</button>
      </div>
    </div>
  );
};

export default OrdenesPage;


// ==================== pages/RecibosCaja.css ====================

.recibos-caja-container {
  padding: 30px;
  background-color: #f5f5f5;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  max-width: 1300px;
  margin: 25px auto;
}

.recibos-caja-container .error-message {
  background-color: #ffe6e6;
  color: #d32f2f;
  padding: 12px;
  border-radius: 8px;
  margin-bottom: 20px;
  text-align: center;
  font-size: 14px;
}

.recibos-caja-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 15px;
  margin-bottom: 25px;
}

.recibos-caja-header .filters {
  display: flex;
  align-items: center;
  gap: 15px;
}

.recibos-caja-header .actions {
  display: flex;
  gap: 15px;
}

.recibos-caja-header .search-input,
.recibos-caja-header .filters input[type="date"],
.recibos-caja-header .filters select {
  padding: 12px;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  font-size: 14px;
  background-color: #fff;
  transition: border-color 0.3s ease;
}

.recibos-caja-header .search-input {
  width: 250px;
}

.recibos-caja-header .filters input[type="date"],
.recibos-caja-header .filters select {
  width: 150px;
}

.recibos-caja-header .search-input:focus,
.recibos-caja-header .filters input[type="date"]:focus,
.recibos-caja-header .filters select:focus {
  outline: none;
  border-color: #1a3c34;
  box-shadow: 0 0 5px rgba(26, 60, 52, 0.2);
}

.recibos-caja-container button,
.recibos-caja-container .search-button,
.recibos-caja-container .export-button,
.recibos-caja-container .new-button,
.recibos-caja-container .action-button.confirm,
.recibos-caja-container .modal-cancel,
.recibos-caja-container .modal-submit,
.recibos-caja-container .modal-close,
.recibos-caja-container .pagination-container button {
  padding: 12px 20px !important;
  background-color: #000000 !important;
  color: #fff !important;
  border: none !important;
  border-radius: 8px !important;
  cursor: pointer !important;
  font-size: 14px !important;
  transition: background-color 0.3s ease !important;
}

.recibos-caja-container button:hover,
.recibos-caja-container .search-button:hover,
.recibos-caja-container .export-button:hover,
.recibos-caja-container .new-button:hover,
.recibos-caja-container .action-button.confirm:hover,
.recibos-caja-container .modal-cancel:hover,
.recibos-caja-container .modal-submit:hover,
.recibos-caja-container .modal-close:hover,
.recibos-caja-container .pagination-container button:hover:not(:disabled) {
  background-color: #585858 !important;
}

.recibos-caja-container .action-button.confirm {
  padding: 8px 15px !important;
  font-size: 14px !important;
}

.recibos-caja-container .modal-close {
  padding: 0 !important;
  font-size: 24px !important;
  background: none !important;
  color: #000 !important; /* Color negro para el icono de cerrar */
}

.recibos-caja-container .modal-close:hover {
  background: none !important;
  color: #585858 !important;
}

/* ==================== INICIO DE CORRECCIÓN DE ESTILOS DE TABLA ==================== */
.recibos-caja-table { /* Se cambia el nombre de la clase para evitar conflictos */
  width: 100%;
  border-collapse: collapse;
  background-color: #fff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  table-layout: fixed; /* Clave para que los anchos funcionen */
}

.recibos-caja-table th,
.recibos-caja-table td {
  padding: 14px;
  text-align: left;
  font-size: 14px;
  color: #333;
  border-bottom: 1px solid #e5e7eb;
  white-space: nowrap;      /* Evita saltos de línea */
  overflow: hidden;         /* Oculta el contenido que desborda */
  text-overflow: ellipsis;  /* Muestra '...' */
}

.recibos-caja-table th {
  background-color: #000000;
  color: #fff;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

/* Anchos de columna para la tabla de Recibos de Caja */
.recibos-caja-table .rc-th-rc, .recibos-caja-table .rc-td-rc { width: 8%; }
.recibos-caja-table .rc-th-fecha, .recibos-caja-table .rc-td-fecha { width: 12%; }
.recibos-caja-table .rc-th-venta, .recibos-caja-table .rc-td-venta { width: 8%; }
.recibos-caja-table .rc-th-metodo, .recibos-caja-table .rc-td-metodo { width: 15%; }
.recibos-caja-table .rc-th-estado, .recibos-caja-table .rc-td-estado { width: 12%; }
.recibos-caja-table .rc-th-valor, .recibos-caja-table .rc-td-valor { width: 12%; text-align: right; }
.recibos-caja-table .rc-th-nota, .recibos-caja-table .rc-td-nota { width: 21%; }
.recibos-caja-table .rc-th-acciones, .recibos-caja-table .rc-td-acciones { width: 12%; text-align: center; }

/* ==================== FIN DE CORRECCIÓN DE ESTILOS DE TABLA ==================== */

.recibos-caja-table tbody tr {
  transition: background-color 0.3s ease;
}

.recibos-caja-table tbody tr:nth-child(even) {
  background-color: #f9fafb;
}

.recibos-caja-table tbody tr:hover {
  background-color: #e6f0ea;
}

.recibos-caja-container .loader-container {
  text-align: center;
  padding: 20px;
}

.recibos-caja-container .loader {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #000;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  animation: spin 1s linear infinite;
  margin: 0 auto;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.recibos-caja-container .pagination-container {
  margin-top: 25px;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
}

.recibos-caja-container .pagination-container button {
  padding: 8px 16px !important;
}

.recibos-caja-container .pagination-container button:disabled {
  background-color: #d1d5db !important;
  cursor: not-allowed !important;
}

.recibos-caja-container .pagination-container span {
  font-size: 14px;
  color: #4b5563;
}



// ==================== pages/ProveedoresPage.css ====================

/* Contenedor principal de la página */
.proveedores-container {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

/* Estilos para el encabezado de la página */
.proveedores-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.proveedores-header h1 {
  font-size: 1.75rem;
  font-weight: 600;
  color: var(--color-text-primary);
}

/* Estilos para la tabla de proveedores */
.proveedores-table {
  width: 100%;
  border-collapse: collapse;
  background-color: var(--color-surface);
  border-radius: var(--border-radius);
  border: 1px solid var(--color-border);
  box-shadow: var(--shadow-sm);
  table-layout: fixed;
}

.proveedores-table th, .proveedores-table td {
  padding: 1rem 1.5rem;
  text-align: left;
  border-bottom: 1px solid var(--color-border);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.proveedores-table th {
  background-color: #f8f9fa;
  color: var(--color-text-secondary);
  font-weight: 600;
  font-size: 0.8rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.proveedores-table tbody tr {
  transition: background-color 0.15s ease-out;
}

.proveedores-table tbody tr:last-child td {
  border-bottom: none;
}

.proveedores-table tbody tr:hover {
  background-color: var(--color-primary-light-bg);
}

/* Anchos de columna fijos */
.th-empresa, .td-empresa { width: 35%; }
.th-encargado, .td-encargado { width: 30%; }
.th-contacto, .td-contacto { width: 25%; }
.th-editar, .td-editar { width: 10%; text-align: center; }


/* Estilos para botones de acción */
.new-button {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.6rem 1.25rem;
  background-color: var(--color-primary);
  color: #fff;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.9rem;
  font-weight: 600;
  transition: background-color 0.2s ease;
}

.new-button:hover {
  background-color: var(--color-primary-hover);
}

.new-button .icon {
  font-size: 1rem;
}

.edit-button {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 1.1rem;
  color: var(--color-text-secondary);
  padding: 0.5rem;
  border-radius: 50%;
  transition: color 0.2s ease, background-color 0.2s ease;
}

.edit-button:hover {
  color: var(--color-primary);
  background-color: var(--color-primary-light-bg);
}



// ==================== pages/NuevaVenta.jsx ====================

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import './NuevaVenta.css';

const NuevaVenta = () => {
  const navigate = useNavigate();
  
  // Estados para el cliente
  const [clienteId, setClienteId] = useState('');
  const [isClienteNuevo, setIsClienteNuevo] = useState(true);
  const [clienteTitle, setClienteTitle] = useState('Cliente Nuevo');
  const [clienteData, setClienteData] = useState({
    nombre: '',
    cedula: '',
    correo: '',
    direccion: '',
    ciudad: 'Bogotá',
    telefono1: '',
    telefono2: ''
  });

  // Estados para la venta
  const [ventaData, setVentaData] = useState({
    id: '',
    id_vendedor: '',
    fecha_venta: '',
    fecha_entrega: '',
    valor_total: ''
  });

  // Estado para la observación
  const [observacion, setObservacion] = useState('');

  // Estado para los vendedores
  const [vendedores, setVendedores] = useState([]);

  // Estados para manejo de errores y carga
  const [errorMessage, setErrorMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  // Cargar vendedores al montar el componente
  useEffect(() => {
    const fetchVendedores = async () => {
      const token = localStorage.getItem("accessToken");
      try {
        const response = await axios.get('http://127.0.0.1:8000/api/vendedores/', {
          headers: { Authorization: `Bearer ${token}` }
        });
        setVendedores(response.data);
      } catch (error) {
        console.error('Error cargando vendedores:', error);
        setErrorMessage('Error al cargar los vendedores.');
      }
    };
    fetchVendedores();
  }, []);

  // Manejar búsqueda de cliente antiguo
  const handleBuscarCliente = async () => {
    if (!clienteId) {
      setErrorMessage('Por favor, ingrese un ID de cliente.');
      return;
    }

    setIsLoading(true);
    const token = localStorage.getItem("accessToken");
    try {
      const response = await axios.get(`http://127.0.0.1:8000/api/clientes/${clienteId}/`, {
        headers: { Authorization: `Bearer ${token}` }
      });

      const cliente = response.data;
      setClienteData({
        nombre: cliente.nombre || '',
        cedula: cliente.cedula || '',
        correo: cliente.correo || '',
        direccion: cliente.direccion || '',
        ciudad: cliente.ciudad || 'Bogotá',
        telefono1: cliente.telefono1 || '',
        telefono2: cliente.telefono2 || ''
      });
      setClienteTitle('Cliente Antiguo');
      setIsClienteNuevo(false);
      setErrorMessage('');
    } catch (error) {
      if (error.response && error.response.status === 404) {
        setErrorMessage('Cliente no existe.');
      } else {
        setErrorMessage('Error al buscar el cliente.');
      }
      // Limpiar el formulario si no se encuentra el cliente
      setClienteData({
        nombre: '',
        cedula: '',
        correo: '',
        direccion: '',
        ciudad: 'Bogotá',
        telefono1: '',
        telefono2: ''
      });
      setClienteTitle('Cliente Nuevo');
      setIsClienteNuevo(true);
    } finally {
      setIsLoading(false);
    }
  };

  // Manejar cambios en los campos del cliente
  const handleClienteChange = (e) => {
    const { name, value } = e.target;
    setClienteData(prev => ({ ...prev, [name]: value }));
  };

  // Manejar cambios en los campos de la venta
  const handleVentaChange = (e) => {
    const { name, value } = e.target;
    setVentaData(prev => ({ ...prev, [name]: value }));
  };

  // Manejar envío del formulario
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setErrorMessage('');

    const token = localStorage.getItem("accessToken");
    const payload = {
      cliente_nuevo: isClienteNuevo,
      cliente: {
        id: isClienteNuevo ? undefined : clienteId,
        nombre: clienteData.nombre,
        cedula: clienteData.cedula,
        correo: clienteData.correo,
        direccion: clienteData.direccion || null,
        ciudad: clienteData.ciudad || null,
        telefono1: clienteData.telefono1 || null,
        telefono2: clienteData.telefono2 || null
      },
      venta: {
        id: ventaData.id,
        id_vendedor: ventaData.id_vendedor,
        fecha_venta: ventaData.fecha_venta,
        fecha_entrega: ventaData.fecha_entrega || null,
        valor_total: parseFloat(ventaData.valor_total)
      },
      observacion: observacion || undefined
    };

    try {
      if (!isClienteNuevo) {
        await axios.put(`http://127.0.0.1:8000/api/clientes/${clienteId}/`, payload.cliente, {
          headers: { Authorization: `Bearer ${token}` }
        });
      }

      const response = await axios.post('http://127.0.0.1:8000/api/crear-venta-cliente/', payload, {
        headers: { Authorization: `Bearer ${token}` }
      });

      alert('Venta creada exitosamente.');
      navigate('/ventas');
    } catch (error) {
      if (error.response && error.response.data) {
        setErrorMessage(`Error al crear la venta: ${JSON.stringify(error.response.data)}`);
      } else {
        setErrorMessage('Error al crear la venta.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  // Manejar cancelar
  const handleCancel = () => {
    navigate('/ventas');
  };

  return (
    <div className="nueva-venta-container">
      {errorMessage && <div className="error-message">{errorMessage}</div>}
      {isLoading && (
        <div className="loader-container">
          <div className="loader"></div>
        </div>
      )}
      
      <div className="form-sections">
        {/* Sección de Cliente Antiguo/Nuevo */}
        <div className="cliente-section card">
          <div className="cliente-antiguo">
            <h3>Buscar Cliente Antiguo</h3>
            <div className="search-cliente">
              <input
                type="text"
                placeholder="ID del cliente"
                value={clienteId}
                onChange={(e) => setClienteId(e.target.value)}
              />
              <button onClick={handleBuscarCliente} disabled={isLoading}>Buscar</button>
            </div>
          </div>

          <div className="cliente-form">
            <h3>{clienteTitle}</h3>
            <div className="cliente-data-columns">
              <div className="column">
                <div className="form-group">
                  <label>Nombre:</label>
                  <input
                    type="text"
                    name="nombre"
                    value={clienteData.nombre}
                    onChange={handleClienteChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Cédula:</label>
                  <input
                    type="text"
                    name="cedula"
                    value={clienteData.cedula}
                    onChange={handleClienteChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label className="label-correo">Correo:</label>
                  <input
                    type="email"
                    name="correo"
                    value={clienteData.correo}
                    onChange={handleClienteChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Teléfono 1:</label>
                  <input
                    type="text"
                    name="telefono1"
                    value={clienteData.telefono1}
                    onChange={handleClienteChange}
                  />
                </div>
              </div>
              <div className="column">
                <div className="form-group">
                  <label>Ciudad:</label>
                  <input
                    type="text"
                    name="ciudad"
                    value={clienteData.ciudad}
                    onChange={handleClienteChange}
                  />
                </div>
                <div className="form-group">
                  <label className="label-direccion">Dirección:</label>
                  <input
                    type="text"
                    name="direccion"
                    value={clienteData.direccion}
                    onChange={handleClienteChange}
                  />
                </div>
                <div className="form-group">
                  <label>Teléfono 2:</label>
                  <input
                    type="text"
                    name="telefono2"
                    value={clienteData.telefono2}
                    onChange={handleClienteChange}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Sección de Datos de la Venta y Observación */}
        <div className="venta-section card">
          <div className="venta-form">
            <h3>Datos de la Venta</h3>
            <div className="form-group">
              <label>ID Venta:</label>
              <input
                type="text"
                name="id"
                value={ventaData.id}
                onChange={handleVentaChange}
                required
              />
            </div>
            <div className="form-group">
              <label>Vendedor:</label>
              <select
                name="id_vendedor"
                value={ventaData.id_vendedor}
                onChange={handleVentaChange}
                required
              >
                <option value="">Seleccionar vendedor</option>
                {vendedores.map((vendedor) => (
                  <option key={vendedor.id} value={vendedor.id}>
                    {vendedor.first_name}
                  </option>
                ))}
              </select>
            </div>
            <div className="form-group">
              <label>Fecha de Venta:</label>
              <input
                type="date"
                name="fecha_venta"
                value={ventaData.fecha_venta}
                onChange={handleVentaChange}
                required
              />
            </div>
            <div className="form-group">
              <label>Fecha de Entrega:</label>
              <input
                type="date"
                name="fecha_entrega"
                value={ventaData.fecha_entrega}
                onChange={handleVentaChange}
              />
            </div>
            <div className="form-group">
              <label>Valor Total:</label>
              <input
                type="number"
                name="valor_total"
                value={ventaData.valor_total}
                onChange={handleVentaChange}
                required
              />
            </div>
          </div>

          <div className="observacion-form">
            <h3>Observación:</h3>
            <textarea
              value={observacion}
              onChange={(e) => setObservacion(e.target.value)}
              rows="4"
              placeholder="Escribe una observación (opcional)..."
            />
          </div>
        </div>
      </div>

      <div className="form-actions">
        <button className="cancel-button" onClick={handleCancel} disabled={isLoading}>
          Cancelar
        </button>
        <button className="submit-button" onClick={handleSubmit} disabled={isLoading}>
          Crear Venta
        </button>
      </div>
    </div>
  );
};

export default NuevaVenta;


// ==================== pages/EditarProveedorPage.jsx ====================

import { useState, useEffect, useContext } from "react";
import { useNavigate, useParams } from "react-router-dom";
import axios from "axios";
import { AppContext } from "../AppContext";

function EditarProveedorPage() {
  const { id } = useParams();
  const [empresa, setEmpresa] = useState("");
  const [encargado, setEncargado] = useState("");
  const [contacto, setContacto] = useState("");
  const navigate = useNavigate();
  const { updateProveedores } = useContext(AppContext);

  useEffect(() => {
    const token = localStorage.getItem("accessToken");

    const fetchProveedor = async () => {
      try {
        const response = await axios.get(
          `https://api.muebleslottus.com/api/proveedores/${id}/`,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        setEmpresa(response.data.nombre_empresa);
        setEncargado(response.data.nombre_encargado);
        setContacto(response.data.contacto);
      } catch (error) {
        console.error("Error fetching provider:", error);
      }
    };

    fetchProveedor();
  }, [id]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const token = localStorage.getItem("accessToken");

    try {
      await axios.put(
        `https://api.muebleslottus.com/api/proveedores/${id}/`,
        {
          nombre_empresa: empresa,
          nombre_encargado: encargado,
          contacto: contacto,
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      await updateProveedores();
      navigate("/proveedores");
    } catch (error) {
      console.error("Error updating provider:", error);
    }
  };

  return (
    <div className="nuevo-proveedor-page">
      <form className="formNuevoProveedor" onSubmit={handleSubmit}>
        <h1>Editar Proveedor</h1>

        <label className="labelNuevoProveedor">
          <span>Empresa:</span>
          <input
            type="text"
            value={empresa}
            onChange={(e) => setEmpresa(e.target.value)}
            required
          />
        </label>

        <label className="labelNuevoProveedor">
          <span>Encargado:</span>
          <input
            type="text"
            value={encargado}
            onChange={(e) => setEncargado(e.target.value)}
            required
          />
        </label>

        <label className="labelNuevoProveedor">
          <span>Contacto:</span>
          <input
            type="text"
            value={contacto}
            onChange={(e) => setContacto(e.target.value)}
            required
          />
        </label>

        <div className="buttons">
          <button type="submit">Guardar cambios</button>
          <button type="button" onClick={() => navigate("/proveedores")}>
            Cancelar
          </button>
        </div>
      </form>
    </div>
  );
}

export default EditarProveedorPage;


// ==================== pages/HomePage.jsx ====================

import { useContext, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { AppContext } from "../AppContext";
import AccesosRapidos from "./AccesosRapidos";
import "./HomePage.css";

function HomePage() {
  const { usuario } = useContext(AppContext);
  const navigate = useNavigate();

  // Validar si hay token y usuario
  useEffect(() => {
    const token = localStorage.getItem("accessToken");

    // Si no hay token, redirigir a /login inmediatamente
    if (!token) {
      navigate("/login");
      return;
    }

    // Si hay token pero usuario es null, esperar a que se cargue
    // Si usuario sigue siendo null después de la solicitud, redirigir a /login
    if (token && !usuario) {
      const checkUser = async () => {
        try {
          const res = await fetch("https://api.muebleslottus.com/api/user/", {
            headers: { Authorization: `Bearer ${token}` },
          });
          if (!res.ok) {
            throw new Error("No autorizado");
          }
        } catch (error) {
          console.error("Error verificando usuario:", error);
          localStorage.removeItem("accessToken"); // Limpiar token inválido
          navigate("/login");
        }
      };
      checkUser();
    }
  }, [usuario, navigate]);

  // Si no hay usuario, no renderizar nada mientras se valida
  if (!usuario) {
    return null; // O puedes mostrar un componente de carga: <div>Cargando...</div>
  }

  // Si el usuario está autenticado, renderizar el contenido
  return (
    <div className="homepage">
      <AccesosRapidos userRole={usuario?.role} />
    </div>
  );
}

export default HomePage;


// ==================== pages/Caja.css ====================

.caja-container {
  padding: 30px;
  background-color: #f5f5f5;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  max-width: 1300px;
  margin: 25px auto;
}

.caja-container .error-message {
  background-color: #ffe6e6;
  color: #d32f2f;
  padding: 12px;
  border-radius: 8px;
  margin-bottom: 20px;
  text-align: center;
  font-size: 14px;
}

.caja-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 15px;
  margin-bottom: 25px;
}

.caja-header .filters {
  display: flex;
  align-items: center;
  gap: 15px;
}

.caja-header .actions {
  display: flex;
  gap: 15px;
}

.caja-header .search-input,
.caja-header .filters input[type="date"] {
  padding: 12px;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  font-size: 14px;
  background-color: #fff;
  transition: border-color 0.3s ease;
}

.caja-header .search-input {
  width: 250px;
}

.caja-header .filters input[type="date"] {
  width: 150px;
}

.caja-header .search-input:focus,
.caja-header .filters input[type="date"]:focus {
  outline: none;
  border-color: #1a3c34;
  box-shadow: 0 0 5px rgba(26, 60, 52, 0.2);
}

.caja-header .search-button {
  padding: 12px 20px;
  background-color: #1a3c34;
  color: #fff;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s ease;
}

.caja-header .search-button:hover {
  background-color: #2e5a52;
}

.caja-header .export-button,
.caja-header .new-button {
  padding: 12px 20px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s ease;
}

.caja-header .export-button {
  background-color: #000000;
  color: #fff;
}

.caja-header .export-button:hover {
  background-color: #585858;
}

.caja-header .new-button {
  background-color: #16a34a;
  color: #fff;
}

.caja-header .new-button:hover {
  background-color: #15803d;
}

.caja-table {
  width: 100%;
  border-collapse: collapse;
  background-color: #fff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  table-layout: fixed; /* Clave para que los anchos funcionen */
}

.caja-table th,
.caja-table td {
  padding: 14px;
  text-align: left;
  font-size: 14px;
  color: #333;
  border-bottom: 1px solid #e5e7eb;
}

.caja-table th {
  background-color: #000000;
  color: #fff;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

/* ==================== INICIO CORRECCIÓN ANCHOS ==================== */
.caja-table .caja-th-id, .caja-table .caja-td-id { width: 7%; }
.caja-table .caja-th-fecha, .caja-table .caja-td-fecha { width: 20%; }
.caja-table .caja-th-concepto, .caja-table .caja-td-concepto { width: 30%; }
.caja-table .caja-th-tipo, .caja-table .caja-td-tipo { width: 10%; }
.caja-table .caja-th-valor, .caja-table .caja-td-valor { width: 15%; text-align: right; }
.caja-table .caja-th-total, .caja-table .caja-td-total { width: 18%; text-align: right; }
/* ==================== FIN CORRECCIÓN ANCHOS ==================== */


.caja-table tbody tr {
  transition: background-color 0.3s ease;
}

.caja-table tbody tr:nth-child(even) {
  background-color: #f9fafb;
}

.caja-table tbody tr:hover {
  background-color: #e6f0ea;
}

.caja-container .loader-container {
  text-align: center;
  padding: 20px;
}

.caja-container .loader {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #000;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  animation: spin 1s linear infinite;
  margin: 0 auto;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.caja-container .pagination-container {
  margin-top: 25px;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
}

.caja-container .pagination-container button {
  padding: 8px 16px;
  background-color: #1a3c34;
  color: #fff;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.caja-container .pagination-container button:disabled {
  background-color: #d1d5db;
  cursor: not-allowed;
}

.caja-container .pagination-container button:hover:not(:disabled) {
  background-color: #2e5a52;
}

.caja-container .pagination-container span {
  font-size: 14px;
  color: #4b5563;
}

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background-color: #fff;
  padding: 25px;
  border-radius: 12px;
  width: 400px;
  max-width: 90%;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
  position: relative;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.modal-header h3 {
  margin: 0;
  font-size: 18px;
  color: #1a3c34;
  font-weight: 600;
}

.modal-close {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #6b7280;
  transition: color 0.3s ease;
}

.modal-close:hover {
  color: #1a3c34;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 6px;
  font-weight: 500;
  color: #1a3c34;
  font-size: 14px;
}

.form-group input,
.form-group select {
  width: 100%;
  padding: 10px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 14px;
  background-color: #f9fafb;
  transition: border-color 0.3s ease;
}

.form-group input:focus,
.form-group select:focus {
  outline: none;
  border-color: #1a3c34;
  box-shadow: 0 0 5px rgba(26, 60, 52, 0.2);
}

.modal-submit {
  padding: 12px 20px;
  background-color: #1a3c34;
  color: #fff;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  width: 100%;
  font-size: 14px;
  transition: background-color 0.3s ease;
}

.modal-submit:hover {
  background-color: #2e5a52;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .caja-container {
    padding: 15px;
  }

  .caja-header {
    flex-direction: column;
    gap: 10px;
  }

  .caja-header .filters {
    flex-direction: column;
    width: 100%;
  }

  .caja-header .search-input,
  .caja-header .filters input[type="date"] {
    width: 100%;
  }

  .caja-header .actions {
    width: 100%;
    justify-content: space-between;
  }

  .caja-header .export-button,
  .caja-header .new-button {
    width: 48%;
  }

  .caja-table th,
  .caja-table td {
    padding: 10px;
    font-size: 12px;
  }

  .caja-container .pagination-container button {
    padding: 6px 12px;
    font-size: 12px;
  }
}



// ==================== pages/AccesosRapidos.css ====================

.accesosRapidos {
  display: flex;
  flex-wrap: wrap;
  gap: 30px;
  justify-content: center;
  align-items: center; /* Asegura que las tarjetas estén centradas verticalmente dentro del contenedor */
}

/* Estilo base para las tarjetas */
.tarjetaAcceso {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 220px;
  height: 180px;
  background: linear-gradient(135deg, #ffffff 0%, #f0f0f0 100%);
  border-radius: 15px;
  box-shadow: 0 6px 12px var(--shadow-color);
  text-decoration: none;
  color: #333;
  font-size: 1.2rem;
  font-weight: 600;
  transition: transform 0.3s ease, box-shadow 0.3s ease, background 0.3s ease;
  opacity: 0;
  animation: slideIn 0.5s ease forwards;
}

/* Animación de entrada para las tarjetas */
@keyframes slideIn {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Ícono de la tarjeta */
.tarjeta-icono {
  font-size: 2.5rem;
  margin-bottom: 15px;
  color: var(--color-primario);
  transition: color 0.3s ease;
}

/* Texto de la tarjeta */
.tarjetaAcceso p {
  margin: 0;
  text-align: center;
}

/* Efecto hover para las tarjetas */
.tarjetaAcceso:hover {
  transform: translateY(-10px);
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
}

/* Estilos personalizados para cada tarjeta */
.tarjetaAcceso.crear-pedido {
  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
  color: white;
}

.tarjetaAcceso.crear-pedido .tarjeta-icono {
  color: white;
}

.tarjetaAcceso.crear-pedido:hover {
  background: linear-gradient(135deg, #3e8ed0 0%, #00c4cc 100%);
}

.tarjetaAcceso.ver-pedidos {
  background: linear-gradient(135deg, #ff7e5f 0%, #feb47b 100%);
  color: white;
}

.tarjetaAcceso.ver-pedidos .tarjeta-icono {
  color: white;
}

.tarjetaAcceso.ver-pedidos:hover {
  background: linear-gradient(135deg, #e06b50 0%, #e09b6a 100%);
}

.tarjetaAcceso.proveedores {
  background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
  color: white;
}

.tarjetaAcceso.proveedores .tarjeta-icono {
  color: white;
}

.tarjetaAcceso.proveedores:hover {
  background: linear-gradient(135deg, #27ae60 0%, #219653 100%);
}

.tarjetaAcceso.referencias {
  background: linear-gradient(135deg, #a855f7 0%, #7e22ce 100%);
  color: white;
}

.tarjetaAcceso.referencias .tarjeta-icono {
  color: white;
}

.tarjetaAcceso.referencias:hover {
  background: linear-gradient(135deg, #9333ea 0%, #6b21a8 100%);
}

/* Ajustes para pantallas pequeñas */
@media (max-width: 768px) {
  .accesosRapidos {
    gap: 20px;
  }

  .tarjetaAcceso {
    width: 180px;
    height: 150px;
    font-size: 1rem;
  }

  .tarjeta-icono {
    font-size: 2rem;
  }
}

@media (max-width: 480px) {
  .tarjetaAcceso {
    width: 100%;
    max-width: 300px;
    height: 120px;
  }
}


// ==================== pages/PerfilPage.jsx ====================

import { useState, useEffect } from "react";
import axios from "axios";
import { FaCircleUser } from "react-icons/fa6";
import "./PerfilPage.css";

function PerfilPage() {
  const [user, setUser] = useState({ first_name: "", last_name: "" });
  const [passwords, setPasswords] = useState({
    actual: "",
    nueva: "",
    confirmar: "",
  });
  const [mensaje, setMensaje] = useState("");
  const [isError, setIsError] = useState(false); // Nuevo estado para manejar si el mensaje es de error o éxito

  // Peticion a API para obtener nombre y apellido del usuario en cada renderizado
  useEffect(() => {
    const token = localStorage.getItem("accessToken");

    const fetchUser = async () => {
      try {
        const response = await axios.get("https://api.muebleslottus.com/api/user/", {
          headers: { Authorization: `Bearer ${token}` },
        });
        setUser({
          first_name: response.data.first_name,
          last_name: response.data.last_name,
        });
      } catch (error) {
        console.error("Error obteniendo datos del usuario:", error);
      }
    };

    fetchUser();
  }, []);

  const handleChange = (e) => {
    setPasswords({ ...passwords, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (passwords.nueva !== passwords.confirmar) {
      setMensaje("Las contraseñas nuevas no coinciden.");
      setIsError(true);
      return;
    }

    const token = localStorage.getItem("accessToken");

    try {
      const response = await axios.post(
        "https://api.muebleslottus.com/api/cambiar-contrasena/",
        {
          old_password: passwords.actual,
          new_password: passwords.nueva,
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      setMensaje("Contraseña actualizada correctamente.");
      setIsError(false);
      // Limpiar los campos después de un cambio exitoso
      setPasswords({ actual: "", nueva: "", confirmar: "" });
    } catch (error) {
      setMensaje("Error al actualizar la contraseña. Verifica los datos.");
      setIsError(true);
      console.error("Error cambiando la contraseña:", error);
    }
  };

  return (
    <div className="perfil-page">
      <main>
        <div className="perfil-container">
          <h2>Perfil de Usuario</h2>
          <div className="user-icon">
            <FaCircleUser size={80} />
          </div>
          <p className="user-name">{`${user.first_name} ${user.last_name}`}</p>

          <h3>Cambiar Contraseña</h3>
          {mensaje && (
            <p className={`mensaje ${isError ? "error" : "exito"}`}>{mensaje}</p>
          )}

          <form className="formPerfil" onSubmit={handleSubmit}>
            <div className="form-group">
              <label htmlFor="actual">Contraseña Actual:</label>
              <input
                type="password"
                id="actual"
                name="actual"
                value={passwords.actual}
                onChange={handleChange}
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="nueva">Nueva Contraseña:</label>
              <input
                type="password"
                id="nueva"
                name="nueva"
                value={passwords.nueva}
                onChange={handleChange}
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="confirmar">Confirmar Nueva Contraseña:</label>
              <input
                type="password"
                id="confirmar"
                name="confirmar"
                value={passwords.confirmar}
                onChange={handleChange}
                required
              />
            </div>

            <button type="submit">Actualizar Contraseña</button>
          </form>
        </div>
      </main>
    </div>
  );
}

export default PerfilPage;


// ==================== pages/AccesosRapidos.jsx ====================

import { Link } from "react-router-dom";
import { FaFileAlt, FaList, FaUsers, FaBox } from "react-icons/fa";
import "./AccesosRapidos.css";

function AccesosRapidos({ userRole }) {
  const accesos = [
    { nombre: "Crear pedido", ruta: "/ordenes/nuevo", icono: <FaFileAlt />, className: "crear-pedido" },
    { nombre: "Ver pedidos", ruta: "/ordenes", icono: <FaList />, className: "ver-pedidos" },
  ];

  if (userRole === "ADMINISTRADOR" || userRole === "AUXILIAR") {
    accesos.push(
      { nombre: "Proveedores", ruta: "/proveedores", icono: <FaUsers />, className: "proveedores" },
      { nombre: "Referencias", ruta: "/referencias", icono: <FaBox />, className: "referencias" }
    );
  }

  return (
    <div className="accesosRapidos">
      {accesos.map((acceso, index) => (
        <Link
          key={index}
          to={acceso.ruta}
          className={`tarjetaAcceso ${acceso.className}`}
          style={{ animationDelay: `${index * 0.2}s` }}
        >
          <div className="tarjeta-icono">{acceso.icono}</div>
          <p>{acceso.nombre}</p>
        </Link>
      ))}
    </div>
  );
}

export default AccesosRapidos;


// ==================== pages/PerfilPage.css ====================

:root {
  --color-primario: #131931; /* Azul principal */
  --hover-btn: #393e50;
  --shadow-color: rgba(0, 0, 0, 0.1);
}

.perfil-page {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 150px;
}

main {
  flex: 1;
  padding: 20px;
  width: 100%;
}

.perfil-container {
  text-align: center;
  background-color: #fff;
  border-radius: 10px;
  padding: 30px;
  box-shadow: 0 4px 12px var(--shadow-color); /* Sombra suave */
  max-width: 600px;
  margin: 0 auto;
}

/* Estilo para los encabezados */
.perfil-container h2 {
  color: var(--color-primario);
  text-transform: uppercase;
  font-weight: 700;
  font-size: 24px;
  margin-bottom: 20px;
}

.perfil-container h3 {
  color: var(--color-primario);
  font-weight: 600;
  font-size: 18px;
  margin-top: 30px;
  margin-bottom: 15px;
}

/* Estilo para el ícono de usuario */
.user-icon {
  color: var(--color-primario);
  margin-bottom: 15px;
}

.user-icon svg {
  transition: color 0.3s ease;
}

.user-icon svg:hover {
  color: var(--hover-btn);
}

/* Estilo para el nombre del usuario */
.user-name {
  font-size: 20px;
  font-weight: 600;
  color: #555;
  margin-bottom: 20px;
}

/* Estilo para el mensaje de éxito o error */
.mensaje {
  font-weight: 600;
  font-size: 14px;
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 15px;
}

.mensaje.exito {
  color: #2ecc71; /* Verde para éxito */
  background-color: rgba(46, 204, 113, 0.1);
}

.mensaje.error {
  color: #e74c3c; /* Rojo para error */
  background-color: rgba(231, 76, 60, 0.1);
}

/* Estilo para el formulario */
.formPerfil {
  display: flex;
  flex-direction: column;
  max-width: 350px;
  margin: 0 auto;
}

/* Estilo para cada grupo de formulario (label + input) */
.form-group {
  margin-bottom: 15px;
  text-align: left;
}

.form-group label {
  display: block;
  font-weight: 600;
  font-size: 14px;
  color: var(--color-primario);
  margin-bottom: 5px;
  width: 250px;
}

.form-group input {
  width: 100%;
  padding: 10px;
  font-size: 14px;
  border: 1px solid #e0e0e0;
  border-radius: 6px;
  transition: border-color 0.3s ease;
}

.form-group input:focus {
  border-color: var(--color-primario);
  outline: none;
  box-shadow: 0 0 5px rgba(19, 25, 49, 0.2); /* Sombra al enfocar */
}

/* Estilo para el botón */
.formPerfil button {
  padding: 12px 20px;
  font-size: 16px;
  font-weight: 600;
  border: none;
  border-radius: 6px;
  background-color: var(--color-primario);
  color: white;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin-top: 10px;
}

.formPerfil button:hover {
  background-color: var(--hover-btn);
}

/* Ajustes para pantallas pequeñas */
@media (max-width: 768px) {
  main {
    padding: 15px;
  }

  .perfil-container {
    padding: 20px;
  }

  .formPerfil {
    max-width: 100%;
  }
}


// ==================== pages/LoginPage.css ====================

:root {
  --color-primario: #131931; /* Azul principal */
  --hover-btn: #393e50;
  --shadow-color: rgba(0, 0, 0, 0.1);
}

.login-page {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #f5f5f5; /* Fondo claro para contraste */
  margin: 0; /* Elimina márgenes por defecto */
  padding: 0; /* Elimina padding por defecto */
  width: 100vw; /* Asegura que ocupe el 100% del ancho de la ventana */
  height: 100vh; /* Asegura que ocupe el 100% de la altura de la ventana */
  overflow: hidden; /* Evita barras de desplazamiento innecesarias */
}

.login-container {
  text-align: center;
  background-color: #fff;
  border-radius: 10px;
  padding: 30px;
  box-shadow: 0 4px 12px var(--shadow-color); /* Sombra suave */
  max-width: 400px; /* Limita el ancho del formulario */
  width: 90%; /* Asegura que sea responsivo */
}

/* Estilo para el encabezado */
.login-container h1 {
  color: var(--color-primario);
  text-transform: uppercase;
  font-weight: 700;
  font-size: 24px;
  margin-bottom: 30px;
}

/* Estilo para el formulario */
.login-container form {
  display: flex;
  flex-direction: column;
  width: 100%; /* Asegura que el formulario ocupe el ancho disponible */
}

/* Estilo para cada grupo de formulario (label + input) */
.form-group {
  margin-bottom: 15px;
  text-align: left;
}

.form-group label {
  display: block;
  font-weight: 600;
  font-size: 14px;
  color: var(--color-primario);
  margin-bottom: 5px;
}

.form-group input {
  width: 100%;
  padding: 10px;
  font-size: 14px;
  border: 1px solid #e0e0e0;
  border-radius: 6px;
  transition: border-color 0.3s ease;
}

.form-group input:focus {
  border-color: var(--color-primario);
  outline: none;
  box-shadow: 0 0 5px rgba(19, 25, 49, 0.2); /* Sombra al enfocar */
}

/* Estilo para el botón */
.login-container button {
  padding: 12px 20px;
  font-size: 16px;
  font-weight: 600;
  border: none;
  border-radius: 6px;
  background-color: var(--color-primario);
  color: white;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin-top: 10px;
}

.login-container button:hover {
  background-color: var(--hover-btn);
}

/* Estilo para el mensaje de error */
.error {
  color: #e74c3c; /* Rojo para error */
  background-color: rgba(231, 76, 60, 0.1);
  font-weight: 600;
  font-size: 14px;
  padding: 10px;
  border-radius: 5px;
  margin-top: 15px;
}

/* Ajustes para pantallas pequeñas */
@media (max-width: 768px) {
  .login-container {
    padding: 20px;
    width: 85%; /* Ajusta el ancho para pantallas pequeñas */
  }
}y


// ==================== pages/ProveedoresPage.jsx ====================

import React, { useState, useEffect, useContext, useMemo } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { AppContext } from "../AppContext";
import API from "../services/api";
import "./ProveedoresPage.css";
import { FaEdit, FaPlus, FaSort, FaSortUp, FaSortDown } from "react-icons/fa";

const ProveedorModal = ({ isOpen, onClose, onSave, proveedor, isLoading }) => {
  const [nombre_empresa, setNombreEmpresa] = useState('');
  const [nombre_encargado, setNombreEncargado] = useState('');
  const [contacto, setContacto] = useState('');

  useEffect(() => {
    if (proveedor) {
      setNombreEmpresa(proveedor.nombre_empresa || '');
      setNombreEncargado(proveedor.nombre_encargado || '');
      setContacto(proveedor.contacto || '');
    } else {
      setNombreEmpresa('');
      setNombreEncargado('');
      setContacto('');
    }
  }, [proveedor, isOpen]);

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave({ id: proveedor?.id, nombre_empresa, nombre_encargado, contacto });
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <div className="modal-header">
          <h3>{proveedor ? 'Editar Proveedor' : 'Nuevo Proveedor'}</h3>
          <button className="modal-close" onClick={onClose}>×</button>
        </div>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>Empresa:</label>
            <input type="text" value={nombre_empresa} onChange={(e) => setNombreEmpresa(e.target.value)} required />
          </div>
          <div className="form-group">
            <label>Encargado:</label>
            <input type="text" value={nombre_encargado} onChange={(e) => setNombreEncargado(e.target.value)} required />
          </div>
          <div className="form-group">
            <label>Contacto:</label>
            <input type="text" value={contacto} onChange={(e) => setContacto(e.target.value)} required />
          </div>
          <button type="submit" className="modal-submit" disabled={isLoading}>
            {isLoading ? 'Guardando...' : (proveedor ? 'Guardar Cambios' : 'Crear Proveedor')}
          </button>
        </form>
      </div>
    </div>
  );
};

function ProveedoresPage() {
  const { updateProveedores } = useContext(AppContext);
  const queryClient = useQueryClient();
  const token = localStorage.getItem("accessToken");

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingProvider, setEditingProvider] = useState(null);
  const [sortConfig, setSortConfig] = useState({ key: 'nombre_empresa', direction: 'ascending' });

  const { data: proveedores = [], isLoading: queryLoading, isError } = useQuery({
    queryKey: ['proveedores'],
    queryFn: () => API.get('proveedores/').then(res => res.data)
  });

  const sortedProveedores = useMemo(() => {
    let sortableItems = [...proveedores];
    if (sortConfig !== null) {
      sortableItems.sort((a, b) => {
        const valA = a[sortConfig.key]?.toLowerCase() || '';
        const valB = b[sortConfig.key]?.toLowerCase() || '';
        if (valA < valB) return sortConfig.direction === 'ascending' ? -1 : 1;
        if (valA > valB) return 1 * (sortConfig.direction === 'ascending' ? 1 : -1);
        return 0;
      });
    }
    return sortableItems;
  }, [proveedores, sortConfig]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };
  
  const getSortIcon = (name) => {
    if (!sortConfig || sortConfig.key !== name) return <FaSort className="sort-icon" />;
    return sortConfig.direction === 'ascending' ? <FaSortUp className="sort-icon active" /> : <FaSortDown className="sort-icon active" />;
  };

  const mutation = useMutation({
    mutationFn: (proveedorData) => proveedorData.id
      ? API.put(`proveedores/${proveedorData.id}/`, proveedorData, { headers: { Authorization: `Bearer ${token}` } })
      : API.post('proveedores/', proveedorData, { headers: { Authorization: `Bearer ${token}` } }),
    onSuccess: async () => {
      await updateProveedores();
      queryClient.invalidateQueries({ queryKey: ['proveedores'] });
      handleCloseModal();
    },
    onError: (error) => console.error("Error guardando proveedor:", error)
  });

  const handleOpenModal = (proveedor = null) => {
    setEditingProvider(proveedor);
    setIsModalOpen(true);
  };
  const handleCloseModal = () => setIsModalOpen(false);
  const handleSave = (data) => mutation.mutate(data);

  return (
    <div className="page-container">
      <div className="page-header">
        {/* El título se ha eliminado de esta sección */}
        <div/>
        <button className="btn-primary" onClick={() => handleOpenModal()}>
          <FaPlus /> Nuevo Proveedor
        </button>
      </div>

      <div className="table-container">
        <table className="data-table">
          <thead>
            <tr>
              <th className="th-empresa sortable" onClick={() => requestSort('nombre_empresa')}>
                <span>Empresa</span> {getSortIcon('nombre_empresa')}
              </th>
              <th className="th-encargado sortable" onClick={() => requestSort('nombre_encargado')}>
                <span>Encargado</span> {getSortIcon('nombre_encargado')}
              </th>
              <th className="th-contacto sortable" onClick={() => requestSort('contacto')}>
                <span>Contacto</span> {getSortIcon('contacto')}
              </th>
              <th className="th-editar">Editar</th>
            </tr>
          </thead>
          <tbody>
            {queryLoading ? (
              <tr><td colSpan="4"><div className="loading-container"><div className="loader"></div></div></td></tr>
            ) : isError ? (
              <tr><td colSpan="4" className="error-cell">Error al cargar datos.</td></tr>
            ) : sortedProveedores.length > 0 ? (
              sortedProveedores.map((proveedor) => (
                <tr key={proveedor.id}>
                  <td className="td-empresa">{proveedor.nombre_empresa}</td>
                  <td className="td-encargado">{proveedor.nombre_encargado}</td>
                  <td className="td-contacto">{proveedor.contacto}</td>
                  <td className="td-editar">
                    <button className="btn-icon" onClick={() => handleOpenModal(proveedor)}>
                      <FaEdit />
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr><td colSpan="4" className="empty-cell">No se encontraron proveedores.</td></tr>
            )}
          </tbody>
        </table>
      </div>
      <ProveedorModal
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        onSave={handleSave}
        proveedor={editingProvider}
        isLoading={mutation.isLoading}
      />
    </div>
  );
}

export default ProveedoresPage;



// ==================== pages/EditarVenta.css ====================

.editar-venta-container {
    padding: 30px;
    background-color: #f5f5f5;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    max-width: 1200px;
    margin: 25px auto;
  }
  
  .editar-venta-container h2 {
    font-size: 24px;
    color: #000000;
    margin-bottom: 20px;
    font-weight: 600;
    text-align: center;
  }
  
  .error-message {
    background-color: #ffe6e6;
    color: #d32f2f;
    padding: 12px;
    border-radius: 8px;
    margin-bottom: 20px;
    text-align: center;
    font-size: 14px;
  }
  
  .loader-container {
    text-align: center;
    padding: 20px 0;
  }
  
  .loader {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #000;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    animation: spin 1s linear infinite;
    margin: 0 auto;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .form-sections {
    display: flex;
    gap: 20px;
    margin-bottom: 20px;
  }
  
  .cliente-section, .venta-section {
    flex: 1;
    padding: 20px;
    background-color: #fff;
    border-radius: 10px;
    border: 1px solid #e5e7eb;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
  }
  
  .card {
    background-color: #f9fafb;
    border-radius: 8px;
    padding: 15px;
  }
  
  .cliente-form h3, .venta-form h3, .observacion-form h3 {
    color: #000000;
    margin-bottom: 12px;
    font-size: 16px;
    font-weight: 600;
  }
  
  .cliente-data-columns {
    display: flex;
    gap: 0;
  }
  
  .cliente-data-columns .column {
    flex: 1;
  }
  
  .form-group {
    margin-bottom: 15px;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 6px;
    font-weight: 500;
    color: #000000;
    font-size: 14px;
    width: 120px;
  }
  
  .form-group .label-correo,
  .form-group .label-direccion {
    margin-right: 5px;
  }
  
  .form-group input,
  .form-group select {
    width: 100%;
    padding: 10px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 14px;
    background-color: #fff;
    transition: border-color 0.3s ease;
  }
  
  .form-group input:focus,
  .form-group select:focus {
    outline: none;
    border-color: #000000;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
  }
  
  .observacion-form textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 14px;
    background-color: #fff;
    resize: vertical;
    transition: border-color 0.3s ease;
  }
  
  .observacion-form textarea:focus {
    outline: none;
    border-color: #000000;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
  }
  
  .form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 12px;
    padding: 10px;
    background-color: #f5f5f5;
    border-top: 1px solid #e5e7eb;
    border-radius: 0 0 10px 10px;
  }
  
  .cancel-button, .submit-button {
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s ease;
  }
  
  .cancel-button {
    background-color: #d1d5db;
    color: #333;
  }
  
  .cancel-button:disabled {
    background-color: #e5e7eb;
    cursor: not-allowed;
  }
  
  .cancel-button:hover:not(:disabled) {
    background-color: #b0b7c2;
  }
  
  .submit-button {
    background-color: #16a34a;
    color: #fff;
  }
  
  .submit-button:disabled {
    background-color: #d1d5db;
    cursor: not-allowed;
  }
  
  .submit-button:hover:not(:disabled) {
    background-color: #15803d;
  }
  
  /* Responsive Adjustments */
  @media (max-width: 768px) {
    .editar-venta-container {
      padding: 15px;
    }
  
    .form-sections {
      flex-direction: column;
      gap: 15px;
    }
  
    .cliente-data-columns {
      flex-direction: column;
      gap: 0;
    }
  
    .form-actions {
      flex-direction: column;
      gap: 8px;
    }
  
    .cancel-button, .submit-button {
      width: 100%;
    }
  }


// ==================== pages/ReferenciasPage.css ====================

/* Hereda los estilos de .page-container, .page-header, .table-container de index.css */

/* Botón principal de la página */
.btn-primary {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  background-color: var(--color-primary);
  color: #fff;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.9rem;
  font-weight: 600;
  transition: background-color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;
  box-shadow: var(--shadow-sm);
}

.btn-primary:hover {
  background-color: var(--color-primary-hover);
  box-shadow: var(--shadow-md);
  transform: translateY(-2px);
}

/* Estilos de la tabla de Referencias */
.data-table {
  width: 100%;
  border-collapse: collapse;
  table-layout: fixed;
}

.data-table th,
.data-table td {
  padding: 1rem 1.5rem;
  text-align: left;
  border-bottom: 1px solid var(--color-border);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.data-table th {
  background-color: #f8f9fa;
  color: var(--color-text-secondary);
  font-weight: 600;
  font-size: 0.75rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.data-table tbody tr:last-child td {
  border-bottom: none;
}

.data-table tbody tr {
  transition: background-color 0.15s ease-out;
}

.data-table tbody tr:hover {
  background-color: var(--color-primary-light-bg);
}

/* Anchos y estilos de columna */
.th-ref-nombre, .td-ref-nombre { width: 45%; font-weight: 500; }
.th-ref-proveedor, .td-ref-proveedor { width: 45%; color: var(--color-text-secondary); }
.th-ref-editar, .td-ref-editar { width: 10%; text-align: center; }

/* Ordenamiento */
.data-table th.sortable {
  cursor: pointer;
  user-select: none;
  transition: color 0.2s ease;
}

.data-table th.sortable:hover {
  color: var(--color-text-primary);
}

.sort-icon {
  margin-left: 0.5rem;
  vertical-align: middle;
  color: var(--color-border-hover);
  transition: color 0.2s ease;
}

.sort-icon.active {
  color: var(--color-primary);
}

/* Botones en la tabla */
.btn-icon {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 1.1rem;
  color: var(--color-text-secondary);
  padding: 0.5rem;
  border-radius: 50%;
  transition: color 0.2s ease, background-color 0.2s ease;
}

.btn-icon:hover {
  color: var(--color-primary);
  background-color: var(--color-primary-light-bg);
}

/* Celdas de estado */
.error-cell, .empty-cell {
  text-align: center;
  padding: 3rem;
  color: var(--color-text-secondary);
  font-style: italic;
}

.error-cell {
  color: var(--color-destructive);
  font-style: normal;
}

/* Formulario en Modal */
.modal-content .form-group {
  margin-bottom: 1.25rem;
}

.modal-content .form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  font-size: 0.875rem;
  color: var(--color-text-secondary);
}

.modal-content .form-group input,
.modal-content .form-group select {
  height: 48px;
  padding: 0 0.75rem;
  font-size: 1rem;
}



// ==================== pages/OrdenesPage.css ====================

/* Se usan selectores específicos para esta página para evitar conflictos. */
.ordenes-container {
  padding: 30px;
  background-color: #f5f5f5;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  max-width: 1300px;
  margin: 25px auto;
}

.ordenes-container .error-message {
  background-color: #ffe6e6;
  color: #d32f2f;
  padding: 12px;
  border-radius: 8px;
  margin-bottom: 20px;
  text-align: center;
  font-size: 14px;
}

.ordenes-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 25px;
}

.ordenes-header .filters {
  display: flex;
  gap: 15px;
}

.ordenes-header .filters select {
  padding: 12px;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  font-size: 14px;
  background-color: #fff;
  transition: border-color 0.3s ease;
}

.ordenes-header .filters select:focus {
  outline: none;
  border-color: #000000;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
}

.ordenes-header .search-section {
  display: flex;
  gap: 15px;
  align-items: center;
}

.ordenes-header .export-button, .ordenes-header .new-venta-button {
  padding: 12px 20px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s ease;
}

.ordenes-header .export-button {
  background-color: #000000;
  color: #fff;
}

.ordenes-header .export-button:hover {
  background-color: #585858;
}

.ordenes-header .new-venta-button {
  background-color: #16a34a;
  color: #fff;
  padding: 12px 30px;
}

.ordenes-header .new-venta-button:hover {
  background-color: #15803d;
}

.ordenes-container .loader-container {
  text-align: center;
  padding: 20px 0;
}

.ordenes-container .loader {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #000;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  animation: spin 1s linear infinite;
  margin: 0 auto;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.ordenes-table {
  width: 100%;
  border-collapse: collapse;
  background-color: #fff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  table-layout: fixed;
}

.ordenes-table th {
  padding: 14px;
  background-color: #000000;
  color: #fff;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  text-align: left;
}

.ordenes-table td {
  padding: 14px;
  text-align: left;
  font-size: 14px;
  color: #333;
  border-bottom: 1px solid #e5e7eb;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Anchos de columna para la tabla de Órdenes de Pedido */
.ordenes-table .op { width: 5%; }
.ordenes-table .proveedor { width: 12%; }
.ordenes-table .vendedor { width: 10%; }
.ordenes-table .venta { width: 6%; }
.ordenes-table .fecha-pedido { width: 9%; }
.ordenes-table .fecha-llegada { width: 9%; }
.ordenes-table .tela { width: 10%; }
.ordenes-table .estado { width: 9%; }
.ordenes-table .observacion { width: 15%; }
.ordenes-table .costo { width: 10%; text-align: right; }
.ordenes-table .boton { width: 5%; text-align: center; }

.ordenes-table tbody tr {
  transition: background-color 0.3s ease;
}

.ordenes-table tbody tr:nth-child(even) {
  background-color: #f9fafb;
}

.ordenes-table tbody tr:hover {
  background-color: #e6f0ea;
}

.ordenes-container .status-circle {
  display: inline-block;
  width: 10px;
  height: 10px;
  border-radius: 50%;
  margin-right: 5px;
  vertical-align: middle;
}

.ordenes-container .status-circle.pendiente { background-color: #f1c40f; }
.ordenes-container .status-circle.entregado { background-color: #2ecc71; }
.ordenes-container .status-circle.anulado { background-color: #e74c3c; }
.ordenes-container .status-circle.archivado { background-color: #95a5a6; }

.ordenes-container .expand-button {
  background-color: transparent !important;
  border: none;
  cursor: pointer;
  font-size: 16px;
  color: #4b5563;
}

.ordenes-container .expanded-row td {
  white-space: normal;
  overflow: visible;
  text-overflow: clip;
}

.ordenes-detalles {
  padding: 20px;
  background-color: #fff;
  border: 1px solid #e5e7eb;
  border-radius: 10px;
  margin: 15px auto;
  width: 95%;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
}

.ordenes-detalles .card { margin-bottom: 20px; }

.formulario-actualizacion .form-row {
  display: flex;
  align-items: flex-end;
  gap: 15px;
  flex-wrap: wrap;
}

.formulario-actualizacion .form-group-ordenes {
  flex: 1;
  min-width: 150px;
  display: flex;
  flex-direction: column;
}

.formulario-actualizacion .form-group-ordenes label {
  margin-bottom: 6px;
  font-weight: 500;
  color: #000000;
  font-size: 14px;
}

.formulario-actualizacion .form-group-ordenes input,
.formulario-actualizacion .form-group-ordenes select {
  width: 100%;
  padding: 10px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 14px;
}

.formulario-actualizacion .form-button {
  display: flex;
  align-items: flex-end;
}

.sub-ordenes-table {
  width: 100%;
  border-collapse: collapse;
  background-color: #fff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  table-layout: fixed;
}
.sub-ordenes-table th, .sub-ordenes-table td { padding: 12px; text-align: left; }
.sub-ordenes-table th { background-color: #333; color: white; text-align: center;}
.sub-ordenes-table .cantidad { width: 15%; }
.sub-ordenes-table .referencia { width: 35%; }
.sub-ordenes-table .descripcion { width: 50%; }

.pagination-container {
  margin-top: 25px;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
}

.pagination-container button {
  padding: 8px 16px;
  background-color: #000000;
  color: #fff;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.pagination-container button:disabled {
  background-color: #d1d5db;
  cursor: not-allowed;
}

.pagination-container button:hover:not(:disabled) {
  background-color: #585858;
}

.pagination-container span {
  font-size: 14px;
  color: #4b5563;
}


// ==================== pages/ComprobantesEgreso.jsx ====================

import React, { useState, useEffect } from 'react';
import './ComprobantesEgreso.css';
import axios from 'axios';
import * as XLSX from 'xlsx';

const ComprobantesEgreso = () => {
  const [comprobantesData, setComprobantesData] = useState([]);
  const [filteredComprobantesData, setFilteredComprobantesData] = useState([]);
  const [fechaInicioCE, setFechaInicioCE] = useState('');
  const [fechaFinCE, setFechaFinCE] = useState('');
  const [medioPagoCE, setMedioPagoCE] = useState('');
  const [proveedorNombreCE, setProveedorNombreCE] = useState('');
  const [queryCE, setQueryCE] = useState('');
  const [searchParams, setSearchParams] = useState({ fecha_inicio: '', fecha_fin: '', medio_pago: '', proveedor: '', query: '' });
  const [proveedores, setProveedores] = useState([]);
  const [newCE, setNewCE] = useState({ id: '', fecha: '', medio_pago: '', proveedor: '', valor: '', nota: '' });
  const [isCreatingCE, setIsCreatingCE] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const pageSize = 30;
  const [isLoading, setIsLoading] = useState(true);
  const [errorMessage, setErrorMessage] = useState('');

  const mediosPago = [
    { value: 'efectivo', label: 'Efectivo' },
    { value: 'bancolombia', label: 'Bancolombia' },
    { value: 'bold', label: 'Bold' },
    { value: 'davivienda', label: 'Davivienda' },
    { value: 'otros', label: 'Otros' }
  ];

  const formatCurrency = (value) => {
    const roundedValue = Math.round(value);
    return `$${roundedValue.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.')}`;
  };
  
  const formatDate = (dateStr) => {
    if (!dateStr) return '-';
    const date = new Date(dateStr + 'T00:00:00');
    const day = String(date.getDate()).padStart(2, '0');
    const monthNames = ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"];
    const month = monthNames[date.getMonth()];
    const year = date.getFullYear();
    return `${day}-${month}-${year}`;
  };

  useEffect(() => {
    const fetchProveedores = async () => {
      const token = localStorage.getItem("accessToken");
      try {
        const response = await axios.get('http://127.0.0.1:8000/api/proveedores/', {
          headers: { Authorization: `Bearer ${token}` }
        });
        setProveedores(response.data);
      } catch (error) {
        console.error('Error cargando proveedores:', error);
        setErrorMessage('Error al cargar los proveedores.');
      }
    };
    fetchProveedores();
  }, []);

  useEffect(() => {
    fetchData({ page_size: pageSize, page: currentPage });
  }, [currentPage]);

  const fetchData = async (params) => {
    setIsLoading(true);
    const token = localStorage.getItem("accessToken");
    try {
      const response = await axios.get('http://127.0.0.1:8000/api/egresos/', {
        headers: { Authorization: `Bearer ${token}` },
        params
      });

      setComprobantesData(response.data.results || []);
      setTotalPages(Math.ceil(response.data.count / pageSize));
      setFilteredComprobantesData(response.data.results || []);
    } catch (error) {
      console.error('Error cargando datos de Comprobantes de Egreso:', error);
      setErrorMessage('Error al cargar los datos de Comprobantes de Egreso.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSearch = () => {
    const params = { page_size: pageSize, page: 1 };
    if (fechaInicioCE) params.fecha_inicio = fechaInicioCE;
    if (fechaFinCE) params.fecha_fin = fechaFinCE;
    if (medioPagoCE) params.medio_pago = medioPagoCE;
    if (proveedorNombreCE) params.proveedor = proveedorNombreCE;
    if (queryCE) params.query = queryCE;

    setSearchParams(params);
    setCurrentPage(1);
    fetchData(params);
  };

  const exportData = async () => {
    const token = localStorage.getItem("accessToken");
    try {
      const response = await axios.get('http://127.0.0.1:8000/api/egresos/?page_size=1000', {
        headers: { Authorization: `Bearer ${token}` }
      });
      const data = response.data.results || [];

      const worksheet = XLSX.utils.json_to_sheet(data);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, 'Comprobantes de Egreso');
      XLSX.writeFile(workbook, 'comprobantes-egreso.xlsx');
    } catch (error) {
      console.error('Error al exportar datos de Comprobantes de Egreso:', error);
      setErrorMessage('Error al exportar los datos de Comprobantes de Egreso.');
    }
  };

  const handleCreateCE = async () => {
    const token = localStorage.getItem("accessToken");
    try {
      const payload = {
        id: newCE.id,
        fecha: newCE.fecha,
        medio_pago: newCE.medio_pago,
        proveedor: parseInt(newCE.proveedor),
        valor: parseFloat(newCE.valor),
        nota: newCE.nota || null
      };
      await axios.post('http://127.0.0.1:8000/api/egresos/crear/', payload, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setNewCE({ id: '', fecha: '', medio_pago: '', proveedor: '', valor: '', nota: '' });
      setIsCreatingCE(false);
      fetchData({ page_size: pageSize, page: 1 });
    } catch (error) {
      console.error('Error al crear comprobante de egreso:', error);
      if (error.response && error.response.data.error) {
        setErrorMessage(error.response.data.error);
      } else {
        setErrorMessage('Error al crear el comprobante de egreso.');
      }
    }
  };

  // ==================== INICIO DE CORRECCIÓN FECHA POR DEFECTO ====================
  const handleOpenCreateModal = () => {
    const today = new Date();
    const formattedDate = today.toISOString().split('T')[0]; // Formato YYYY-MM-DD
    setNewCE({
      id: '',
      fecha: formattedDate,
      medio_pago: '',
      proveedor: '',
      valor: '',
      nota: ''
    });
    setIsCreatingCE(true);
  };
  // ==================== FIN DE CORRECCIÓN FECHA POR DEFECTO ====================

  return (
    <div className="comprobantes-egreso-container">
      {errorMessage && <div className="error-message">{errorMessage}</div>}
      <div className="comprobantes-egreso-header">
        <div className="filters">
          <input
            type="text"
            className="search-input"
            placeholder="Buscar por CE"
            value={queryCE}
            onChange={(e) => setQueryCE(e.target.value)}
          />
          <input
            type="date"
            value={fechaInicioCE}
            onChange={(e) => setFechaInicioCE(e.target.value)}
          />
          <input
            type="date"
            value={fechaFinCE}
            onChange={(e) => setFechaFinCE(e.target.value)}
          />
          <select
            value={medioPagoCE}
            onChange={(e) => setMedioPagoCE(e.target.value)}
          >
            <option value="">Elegir medio de pago</option>
            {mediosPago.map((medio) => (
              <option key={medio.value} value={medio.value}>{medio.label}</option>
            ))}
          </select>
          <select
            value={proveedorNombreCE}
            onChange={(e) => setProveedorNombreCE(e.target.value)}
          >
            <option value="">Elegir proveedor</option>
            {proveedores.map((proveedor) => (
              <option key={proveedor.id} value={proveedor.nombre_empresa}>{proveedor.nombre_empresa}</option>
            ))}
          </select>
          <button className="search-button" onClick={handleSearch}>Buscar</button>
        </div>
        <div className="actions">
          <button className="export-button" onClick={exportData}>Exportar</button>
          <button className="new-button" onClick={handleOpenCreateModal}>Nuevo</button>
        </div>
      </div>
      <table className="ce-table">
        <thead>
          <tr>
            <th className="ce-th-id">CE</th>
            <th className="ce-th-fecha">Fecha</th>
            <th className="ce-th-proveedor">Proveedor</th>
            <th className="ce-th-metodo">Medio de Pago</th>
            <th className="ce-th-valor">Valor</th>
            <th className="ce-th-nota">Nota</th>
          </tr>
        </thead>
        <tbody>
          {isLoading ? (
            <tr>
              <td colSpan="6">
                <div className="loader-container">
                  <div className="loader"></div>
                </div>
              </td>
            </tr>
          ) : filteredComprobantesData.length > 0 ? (
            filteredComprobantesData.map((item) => (
              <tr key={item.id}>
                <td className="ce-td-id">{item.id}</td>
                <td className="ce-td-fecha">{formatDate(item.fecha)}</td>
                <td className="ce-td-proveedor">{item.proveedor_nombre || '-'}</td>
                <td className="ce-td-metodo">{mediosPago.find(medio => medio.value === item.medio_pago)?.label || item.medio_pago}</td>
                <td className="ce-td-valor">{formatCurrency(item.valor)}</td>
                <td className="ce-td-nota">{item.nota || '-'}</td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="6">No hay comprobantes de egreso para mostrar.</td>
            </tr>
          )}
        </tbody>
      </table>
      {isCreatingCE && (
        <CreateCEModal
          newCE={newCE}
          setNewCE={setNewCE}
          mediosPago={mediosPago}
          proveedores={proveedores}
          onSave={handleCreateCE}
          onClose={() => setIsCreatingCE(false)}
        />
      )}
      <div className="pagination-container">
        <button disabled={currentPage === 1} onClick={() => setCurrentPage(currentPage - 1)}>Anterior</button>
        <span>{currentPage} / {totalPages}</span>
        <button disabled={currentPage === totalPages} onClick={() => setCurrentPage(currentPage + 1)}>Siguiente</button>
      </div>
    </div>
  );
};

// Modal Component for Creating a Comprobante de Egreso
const CreateCEModal = ({ newCE, setNewCE, mediosPago, proveedores, onSave, onClose }) => {
  const handleChange = (e) => {
    setNewCE({ ...newCE, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave();
  };

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <div className="modal-header">
          <h3>Nuevo comprobante de egreso</h3>
          <button className="modal-close" onClick={onClose}>×</button>
        </div>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>CE:</label>
            <input
              type="number"
              name="id"
              value={newCE.id}
              onChange={handleChange}
              required
              placeholder="Ingresa el ID del comprobante"
            />
          </div>
          <div className="form-group">
            <label>Fecha:</label>
            <input
              type="date"
              name="fecha"
              value={newCE.fecha}
              onChange={handleChange}
              required
            />
          </div>
          <div className="form-group">
            <label>Medio de pago:</label>
            <select
              name="medio_pago"
              value={newCE.medio_pago}
              onChange={handleChange}
              required
            >
              <option value="">Elegir medio de pago</option>
              {mediosPago.map((medio) => (
                <option key={medio.value} value={medio.value}>{medio.label}</option>
              ))}
            </select>
          </div>
          <div className="form-group">
            <label>Proveedor:</label>
            <select
              name="proveedor"
              value={newCE.proveedor}
              onChange={handleChange}
              required
            >
              <option value="">Elegir proveedor</option>
              {proveedores.map((proveedor) => (
                <option key={proveedor.id} value={proveedor.id}>{proveedor.nombre_empresa}</option>
              ))}
            </select>
          </div>
          <div className="form-group">
            <label>Valor:</label>
            <input
              type="number"
              name="valor"
              value={newCE.valor}
              onChange={handleChange}
              required
              min="0"
              step="0.01"
            />
          </div>
          <div className="form-group">
            <label>Nota:</label>
            <textarea
              name="nota"
              value={newCE.nota}
              onChange={handleChange}
              placeholder="Escribe una nota (opcional)"
            />
          </div>
          <button type="submit" className="modal-submit">Crear</button>
        </form>
      </div>
    </div>
  );
};

export default ComprobantesEgreso;



// ==================== pages/LoginPage.jsx ====================

// src/pages/LoginPage.jsx
import { useState, useContext, useEffect } from "react"; // Agrega useEffect
import { useNavigate } from "react-router-dom";
import API from "../services/api";
import "./LoginPage.css";
import { AppContext } from "../AppContext";

function LoginPage() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();
  const { setUsuario } = useContext(AppContext);

  // Limpiar localStorage al cargar la página
  useEffect(() => {
    localStorage.removeItem("accessToken");
    localStorage.removeItem("refreshToken");
    localStorage.removeItem("userRole");
  }, []);

  const handleLogin = async (e) => {
    e.preventDefault();
    setError("");
    try {
      console.log("Enviando solicitud de login con:", { username, password });
      const response = await API.post("login/", { username, password }, {
        headers: { "Content-Type": "application/json" },
      });
      console.log("Respuesta completa:", response);
      localStorage.setItem("accessToken", response.data.access);
      localStorage.setItem("refreshToken", response.data.refresh);
  
      const userResponse = await API.get("user/");
      console.log("Datos del usuario:", userResponse.data);
      const role = userResponse.data.role;
      localStorage.setItem("userRole", role);
      setUsuario(userResponse.data);
      navigate("/");
    } catch (err) {
      console.error("Error completo:", err);
      console.error("Datos del error:", err.response?.data);
      setError("Credenciales inválidas. Intenta de nuevo.");
    }
  };
  return (
    <div className="login-page">
      <div className="login-container">
        <h1>Iniciar Sesión</h1>
        <form onSubmit={handleLogin}>
          <div className="form-group">
            <label htmlFor="username">Usuario:</label>
            <input
              type="text"
              id="username"
              placeholder="Ingresa tu usuario"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="password">Contraseña:</label>
            <input
              type="password"
              id="password"
              placeholder="Ingresa tu contraseña"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          <button type="submit">Entrar</button>
          {error && <p className="error">{error}</p>}
        </form>
      </div>
    </div>
  );
}

export default LoginPage;


// ==================== pages/EditarVenta.jsx ====================

import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import axios from 'axios';
import './EditarVenta.css';

const EditarVenta = () => {
  const navigate = useNavigate();
  const { id } = useParams(); // Get the venta ID from the URL

  // Estados para el cliente
  const [clienteData, setClienteData] = useState({
    nombre: '',
    cedula: '',
    correo: '',
    direccion: '',
    ciudad: 'Bogotá',
    telefono1: '',
    telefono2: ''
  });

  // Estados para la venta
  const [ventaData, setVentaData] = useState({
    id: id,
    id_vendedor: '',
    fecha_venta: '',
    fecha_entrega: '',
    valor_total: ''
  });

  // Estado para la observación
  const [observacion, setObservacion] = useState('');

  // Estado para los vendedores
  const [vendedores, setVendedores] = useState([]);

  // Estados para manejo de errores y carga
  const [errorMessage, setErrorMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  // Fetch vendedores and venta details on mount
  useEffect(() => {
    const fetchData = async () => {
      const token = localStorage.getItem("accessToken");
      setIsLoading(true);

      try {
        // Fetch vendedores
        const vendedoresResponse = await axios.get('http://127.0.0.1:8000/api/vendedores/', {
          headers: { Authorization: `Bearer ${token}` }
        });
        setVendedores(vendedoresResponse.data);

        // Fetch venta details
        const ventaResponse = await axios.get(`http://127.0.0.1:8000/api/ventas/${id}/`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        const ventaDetails = ventaResponse.data;

        // Set cliente data
        setClienteData({
          id: ventaDetails.cliente.id,
          nombre: ventaDetails.cliente.nombre || '',
          cedula: ventaDetails.cliente.cedula || '',
          correo: ventaDetails.cliente.correo || '',
          direccion: ventaDetails.cliente.direccion || '',
          ciudad: ventaDetails.cliente.ciudad || 'Bogotá',
          telefono1: ventaDetails.cliente.telefono1 || '',
          telefono2: ventaDetails.cliente.telefono2 || ''
        });

        // Set venta data
        setVentaData({
          id: ventaDetails.id_venta,
          id_vendedor: ventaDetails.vendedor_id || '',
          fecha_venta: ventaDetails.fecha_venta || '',
          fecha_entrega: ventaDetails.fecha_entrega || '',
          valor_total: ventaDetails.valor || ''
        });

        // Set observaciones if any
        if (ventaDetails.observaciones_venta.length > 0) {
          setObservacion(ventaDetails.observaciones_venta[0].texto);
        }

      } catch (error) {
        console.error('Error cargando datos:', error);
        setErrorMessage('Error al cargar los datos de la venta.');
      } finally {
        setIsLoading(false);
      }
    };
    fetchData();
  }, [id]);

  // Manejar cambios en los campos del cliente
  const handleClienteChange = (e) => {
    const { name, value } = e.target;
    setClienteData(prev => ({ ...prev, [name]: value }));
  };

  // Manejar cambios en los campos de la venta
  const handleVentaChange = (e) => {
    const { name, value } = e.target;
    setVentaData(prev => ({ ...prev, [name]: value }));
  };

  // Manejar envío del formulario
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setErrorMessage('');

    const token = localStorage.getItem("accessToken");
    const payload = {
      cliente: {
        id: clienteData.id,
        nombre: clienteData.nombre,
        cedula: clienteData.cedula,
        correo: clienteData.correo,
        direccion: clienteData.direccion || null,
        ciudad: clienteData.ciudad || null,
        telefono1: clienteData.telefono1 || null,
        telefono2: clienteData.telefono2 || null
      },
      venta: {
        id: ventaData.id,
        id_vendedor: ventaData.id_vendedor,
        fecha_venta: ventaData.fecha_venta,
        fecha_entrega: ventaData.fecha_entrega || null,
        valor_total: parseFloat(ventaData.valor_total)
      }
    };

    try {
      await axios.put(`http://127.0.0.1:8000/api/ventas/${id}/editar/`, payload, {
        headers: { Authorization: `Bearer ${token}` }
      });

      // If there's an observacion, update or create it
      if (observacion) {
        await axios.post(
          `http://127.0.0.1:8000/api/ventas/${id}/observaciones/`,
          { texto: observacion },
          { headers: { Authorization: `Bearer ${token}` } }
        );
      }

      alert('Venta actualizada exitosamente.');
      navigate('/ventas');
    } catch (error) {
      if (error.response && error.response.data) {
        setErrorMessage(`Error al actualizar la venta: ${JSON.stringify(error.response.data)}`);
      } else {
        setErrorMessage('Error al actualizar la venta.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  // Manejar cancelar
  const handleCancel = () => {
    navigate('/ventas');
  };

  return (
    <div className="editar-venta-container">
      {errorMessage && <div className="error-message">{errorMessage}</div>}
      {isLoading && (
        <div className="loader-container">
          <div className="loader"></div>
        </div>
      )}
      
      <div className="form-sections">
        {/* Sección de Cliente */}
        <div className="cliente-section card">
          <div className="cliente-form">
            <h3>Datos del Cliente</h3>
            <div className="cliente-data-columns">
              <div className="column">
                <div className="form-group">
                  <label>Nombre:</label>
                  <input
                    type="text"
                    name="nombre"
                    value={clienteData.nombre}
                    onChange={handleClienteChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Cédula:</label>
                  <input
                    type="text"
                    name="cedula"
                    value={clienteData.cedula}
                    onChange={handleClienteChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label className="label-correo">Correo:</label>
                  <input
                    type="email"
                    name="correo"
                    value={clienteData.correo}
                    onChange={handleClienteChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Teléfono 1:</label>
                  <input
                    type="text"
                    name="telefono1"
                    value={clienteData.telefono1}
                    onChange={handleClienteChange}
                  />
                </div>
              </div>
              <div className="column">
                <div className="form-group">
                  <label>Ciudad:</label>
                  <input
                    type="text"
                    name="ciudad"
                    value={clienteData.ciudad}
                    onChange={handleClienteChange}
                  />
                </div>
                <div className="form-group">
                  <label className="label-direccion">Dirección:</label>
                  <input
                    type="text"
                    name="direccion"
                    value={clienteData.direccion}
                    onChange={handleClienteChange}
                  />
                </div>
                <div className="form-group">
                  <label>Teléfono 2:</label>
                  <input
                    type="text"
                    name="telefono2"
                    value={clienteData.telefono2}
                    onChange={handleClienteChange}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Sección de Datos de la Venta y Observación */}
        <div className="venta-section card">
          <div className="venta-form">
            <h3>Datos de la Venta</h3>
            <div className="form-group">
              <label>ID Venta:</label>
              <input
                type="text"
                name="id"
                value={ventaData.id}
                onChange={handleVentaChange}
                disabled
              />
            </div>
            <div className="form-group">
              <label>Vendedor:</label>
              <select
                name="id_vendedor"
                value={ventaData.id_vendedor}
                onChange={handleVentaChange}
                required
              >
                <option value="">Seleccionar vendedor</option>
                {vendedores.map((vendedor) => (
                  <option key={vendedor.id} value={vendedor.id}>
                    {vendedor.first_name}
                  </option>
                ))}
              </select>
            </div>
            <div className="form-group">
              <label>Fecha de Venta:</label>
              <input
                type="date"
                name="fecha_venta"
                value={ventaData.fecha_venta}
                onChange={handleVentaChange}
                required
              />
            </div>
            <div className="form-group">
              <label>Fecha de Entrega:</label>
              <input
                type="date"
                name="fecha_entrega"
                value={ventaData.fecha_entrega}
                onChange={handleVentaChange}
              />
            </div>
            <div className="form-group">
              <label>Valor Total:</label>
              <input
                type="number"
                name="valor_total"
                value={ventaData.valor_total}
                onChange={handleVentaChange}
                required
              />
            </div>
          </div>

          <div className="observacion-form">
            <h3>Observación:</h3>
            <textarea
              value={observacion}
              onChange={(e) => setObservacion(e.target.value)}
              rows="4"
              placeholder="Escribe una observación (opcional)..."
            />
          </div>
        </div>
      </div>

      <div className="form-actions">
        <button className="cancel-button" onClick={handleCancel} disabled={isLoading}>
          Cancelar
        </button>
        <button className="submit-button" onClick={handleSubmit} disabled={isLoading}>
          Actualizar Venta
        </button>
      </div>
    </div>
  );
};

export default EditarVenta;


// ==================== pages/HomePage.css ====================

:root {
    --color-primario: #131931;
    --hover-btn: #393e50;
    --shadow-color: rgba(0, 0, 0, 0.1);
  }
  
  .homepage {
    display: flex;
    justify-content: center; /* Centrado horizontal */
    align-items: center; /* Centrado vertical */
    padding: 20px;
    position: relative;
    overflow: hidden;
    margin-top: 250px;
  }
  
  /* Ajustes para pantallas pequeñas */
  @media (max-width: 768px) {
    .homepage {
      padding: 10px;
    }
  }


// ==================== pages/ReferenciasPage.jsx ====================

import React, { useState, useContext, useEffect, useMemo } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import API from "../services/api";
import "./ReferenciasPage.css";
import { FaEdit, FaPlus, FaSort, FaSortUp, FaSortDown } from "react-icons/fa";
import { AppContext } from "../AppContext";

// Componente del Modal para crear y editar Referencias
const ReferenciaModal = ({ isOpen, onClose, onSave, proveedores, referencia, isLoading }) => {
  const [nombre, setNombre] = useState('');
  const [proveedorId, setProveedorId] = useState('');

  useEffect(() => {
    if (referencia) {
      setNombre(referencia.nombre || '');
      setProveedorId(referencia.proveedor || '');
    } else {
      setNombre('');
      setProveedorId('');
    }
  }, [referencia, isOpen]);

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave({
      id: referencia?.id,
      nombre,
      proveedor: proveedorId,
    });
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <div className="modal-header">
          <h3>{referencia ? 'Editar Referencia' : 'Nueva Referencia'}</h3>
          <button className="modal-close" onClick={onClose}>×</button>
        </div>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>Nombre de la Referencia</label>
            <input type="text" value={nombre} onChange={(e) => setNombre(e.target.value)} required />
          </div>
          <div className="form-group">
            <label>Proveedor</label>
            <select value={proveedorId} onChange={(e) => setProveedorId(e.target.value)} required>
              <option value="">Selecciona un proveedor</option>
              {proveedores.map((proveedor) => (
                <option key={proveedor.id} value={proveedor.id}>
                  {proveedor.nombre_empresa}
                </option>
              ))}
            </select>
          </div>
          <button type="submit" className="modal-submit" disabled={isLoading}>
            {isLoading ? 'Guardando...' : (referencia ? 'Guardar Cambios' : 'Crear Referencia')}
          </button>
        </form>
      </div>
    </div>
  );
};


function ReferenciasPage() {
  const { proveedores, isLoading: contextLoading } = useContext(AppContext);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingReferencia, setEditingReferencia] = useState(null);
  const [sortConfig, setSortConfig] = useState({ key: 'proveedor_name', direction: 'ascending' });
  const token = localStorage.getItem("accessToken");
  const queryClient = useQueryClient();

  const { data: referencias = [], isLoading, isError } = useQuery({
    queryKey: ["referencias", proveedores],
    queryFn: async () => {
      if (proveedores.length === 0) return [];
      const res = await API.get("referencias/");
      return res.data.map((ref) => {
        const proveedor = proveedores.find((prov) => prov.id === ref.proveedor);
        return { ...ref, proveedor_name: proveedor ? proveedor.nombre_empresa : "Desconocido" };
      });
    },
    enabled: !!token && !contextLoading,
  });

  const sortedReferencias = useMemo(() => {
    let sortableItems = [...referencias];
    if (sortConfig !== null) {
      sortableItems.sort((a, b) => {
        const valA = a[sortConfig.key]?.toLowerCase() || '';
        const valB = b[sortConfig.key]?.toLowerCase() || '';
        if (valA < valB) return sortConfig.direction === 'ascending' ? -1 : 1;
        if (valA > valB) return 1 * (sortConfig.direction === 'ascending' ? 1 : -1);
        return 0;
      });
    }
    return sortableItems;
  }, [referencias, sortConfig]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getSortIcon = (name) => {
    if (!sortConfig || sortConfig.key !== name) return <FaSort className="sort-icon" />;
    return sortConfig.direction === 'ascending' ? <FaSortUp className="sort-icon active" /> : <FaSortDown className="sort-icon active" />;
  };

  const mutation = useMutation({
    mutationFn: (referenciaData) => {
      const { id, ...data } = referenciaData;
      return id ? API.put(`referencias/${id}/`, data, { headers: { Authorization: `Bearer ${token}` } }) : API.post("referencias/", data, { headers: { Authorization: `Bearer ${token}` } });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["referencias"] });
      handleCloseModal();
    },
    onError: (error) => console.error("Error guardando referencia:", error.response?.data || error),
  });

  const handleOpenModal = (referencia = null) => {
    setEditingReferencia(referencia);
    setIsModalOpen(true);
  };
  const handleCloseModal = () => setIsModalOpen(false);
  const handleSave = (data) => mutation.mutate(data);
  
  return (
    <div className="page-container">
      <div className="page-header">
        {/* Título eliminado de aquí para ser manejado por el Header global */}
        <div/> {/* Div vacío para alinear el botón a la derecha */}
        <button className="btn-primary" onClick={() => handleOpenModal()}>
          <FaPlus /> Nueva Referencia
        </button>
      </div>

      <div className="table-container">
        <table className="data-table">
          <thead>
            <tr>
              <th className="th-ref-nombre sortable" onClick={() => requestSort('nombre')}>
                <span>Referencia</span> {getSortIcon('nombre')}
              </th>
              <th className="th-ref-proveedor sortable" onClick={() => requestSort('proveedor_name')}>
                <span>Proveedor</span> {getSortIcon('proveedor_name')}
              </th>
              <th className="th-ref-editar">Editar</th>
            </tr>
          </thead>
          <tbody>
            {isLoading || contextLoading ? (
              <tr><td colSpan="3"><div className="loading-container"><div className="loader"></div></div></td></tr>
            ) : isError ? (
              <tr><td colSpan="3" className="error-cell">Error al cargar datos.</td></tr>
            ) : sortedReferencias.length > 0 ? (
              sortedReferencias.map((ref) => (
                <tr key={ref.id}>
                  <td className="td-ref-nombre">{ref.nombre}</td>
                  <td className="td-ref-proveedor">{ref.proveedor_name}</td>
                  <td className="td-ref-editar">
                    <button type="button" onClick={() => handleOpenModal(ref)} className="btn-icon" disabled={mutation.isLoading}><FaEdit /></button>
                  </td>
                </tr>
              ))
            ) : (
              <tr><td colSpan="3" className="empty-cell">No hay referencias disponibles.</td></tr>
            )}
          </tbody>
        </table>
      </div>
      <ReferenciaModal 
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        onSave={handleSave}
        proveedores={proveedores}
        referencia={editingReferencia}
        isLoading={mutation.isLoading}
      />
    </div>
  );
}

export default ReferenciasPage;



// ==================== pages/ComprobantesEgreso.css ====================

.comprobantes-egreso-container {
  padding: 30px;
  background-color: #f5f5f5;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  max-width: 1300px;
  margin: 25px auto;
}

.comprobantes-egreso-container .error-message {
  background-color: #ffe6e6;
  color: #d32f2f;
  padding: 12px;
  border-radius: 8px;
  margin-bottom: 20px;
  text-align: center;
  font-size: 14px;
}

.comprobantes-egreso-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 15px;
  margin-bottom: 25px;
}

.comprobantes-egreso-header .filters {
  display: flex;
  align-items: center;
  gap: 15px;
}

.comprobantes-egreso-header .actions {
  display: flex;
  gap: 15px;
}

.comprobantes-egreso-header .search-input,
.comprobantes-egreso-header .filters input[type="date"],
.comprobantes-egreso-header .filters select {
  padding: 12px;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  font-size: 14px;
  background-color: #fff;
  transition: border-color 0.3s ease;
}

.comprobantes-egreso-header .search-input {
  width: 250px;
}

.comprobantes-egreso-header .filters input[type="date"],
.comprobantes-egreso-header .filters select {
  width: 150px;
}

.comprobantes-egreso-header .search-input:focus,
.comprobantes-egreso-header .filters input[type="date"]:focus,
.comprobantes-egreso-header .filters select:focus {
  outline: none;
  border-color: #1a3c34;
  box-shadow: 0 0 5px rgba(26, 60, 52, 0.2);
}

.comprobantes-egreso-container button,
.comprobantes-egreso-container .search-button,
.comprobantes-egreso-container .export-button,
.comprobantes-egreso-container .new-button,
.comprobantes-egreso-container .modal-submit,
.comprobantes-egreso-container .modal-close,
.comprobantes-egreso-container .pagination-container button {
  padding: 12px 20px !important;
  background-color: #000000 !important;
  color: #fff !important;
  border: none !important;
  border-radius: 8px !important;
  cursor: pointer !important;
  font-size: 14px !important;
  transition: background-color 0.3s ease !important;
}

.comprobantes-egreso-container button:hover,
.comprobantes-egreso-container .search-button:hover,
.comprobantes-egreso-container .export-button:hover,
.comprobantes-egreso-container .new-button:hover,
.comprobantes-egreso-container .modal-submit:hover,
.comprobantes-egreso-container .modal-close:hover,
.comprobantes-egreso-container .pagination-container button:hover:not(:disabled) {
  background-color: #585858 !important;
}

.comprobantes-egreso-container .modal-close {
  padding: 0 !important;
  font-size: 24px !important;
  background: none !important;
  color: #000000 !important;
}

.comprobantes-egreso-container .modal-close:hover {
  background: none !important;
  color: #585858 !important;
}

.ce-table {
  width: 100%;
  border-collapse: collapse;
  background-color: #fff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  table-layout: fixed;
}

.ce-table th,
.ce-table td {
  padding: 14px;
  font-size: 14px;
  color: #333;
  border-bottom: 1px solid #e5e7eb;
}

/* ==================== INICIO DE LA CORRECCIÓN DE ALINEACIÓN ==================== */
.ce-table th {
  background-color: #000000;
  color: #fff;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  text-align: center; /* Los encabezados de columna ahora están centrados */
}

.ce-table td {
  text-align: left; /* El contenido de las celdas está alineado a la izquierda */
}

/* Anchos de columna para la tabla de Comprobantes de Egreso */
.ce-table .ce-th-id, .ce-table .ce-td-id { width: 5%; }
.ce-table .ce-th-fecha, .ce-table .ce-td-fecha { width: 10%; }
.ce-table .ce-th-proveedor, .ce-table .ce-td-proveedor { width: 15%; }
.ce-table .ce-th-metodo, .ce-table .ce-td-metodo { width: 15%; }
.ce-table .ce-th-nota, .ce-table .ce-td-nota { width: 25%; }

/* Se mantiene la alineación a la derecha para la columna de valor */
.ce-table .ce-th-valor, 
.ce-table .ce-td-valor { 
  width: 15%; 
  text-align: right; 
}
/* ==================== FIN DE LA CORRECCIÓN DE ALINEACIÓN ==================== */

.ce-table tbody tr {
  transition: background-color 0.3s ease;
}

.ce-table tbody tr:nth-child(even) {
  background-color: #f9fafb;
}

.ce-table tbody tr:hover {
  background-color: #e6f0ea;
}

.comprobantes-egreso-container .loader-container {
  text-align: center;
  padding: 20px;
}

.comprobantes-egreso-container .loader {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #000;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  animation: spin 1s linear infinite;
  margin: 0 auto;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.comprobantes-egreso-container .pagination-container {
  margin-top: 25px;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
}

.comprobantes-egreso-container .pagination-container button {
  padding: 8px 16px !important;
}

.comprobantes-egreso-container .pagination-container button:disabled {
  background-color: #d1d5db !important;
  cursor: not-allowed !important;
}

.comprobantes-egreso-container .pagination-container span {
  font-size: 14px;
  color: #4b5563;
}

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background-color: #fff;
  padding: 25px;
  border-radius: 12px;
  width: 400px;
  max-width: 90%;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
  position: relative;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.modal-header h3 {
  margin: 0;
  font-size: 18px;
  color: #1a3c34;
  font-weight: 600;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 6px;
  font-weight: 500;
  color: #1a3c34;
  font-size: 14px;
}

.form-group input,
.form-group select,
.form-group textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 14px;
  background-color: #f9fafb;
  transition: border-color 0.3s ease;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
  outline: none;
  border-color: #1a3c34;
  box-shadow: 0 0 5px rgba(26, 60, 52, 0.2);
}

.form-group textarea {
  height: 100px;
  resize: vertical;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .comprobantes-egreso-container {
    padding: 15px;
  }

  .comprobantes-egreso-header {
    flex-direction: column;
    gap: 10px;
  }

  .comprobantes-egreso-header .filters {
    flex-direction: column;
    width: 100%;
  }

  .comprobantes-egreso-header .search-input,
  .comprobantes-egreso-header .filters input[type="date"],
  .comprobantes-egreso-header .filters select {
    width: 100%;
  }

  .comprobantes-egreso-header .actions {
    width: 100%;
    justify-content: space-between;
  }

  .comprobantes-egreso-header .export-button,
  .comprobantes-egreso-header .new-button {
    width: 48%;
  }

  .ce-table th,
  .ce-table td {
    padding: 10px;
    font-size: 12px;
  }

  .comprobantes-egreso-container .pagination-container button {
    padding: 6px 12px !important;
    font-size: 12px !important;
  }
}



// ==================== pages/NuevaVenta.css ====================

.nueva-venta-container {
  padding: 30px;
  background-color: #f5f5f5;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  max-width: 1200px;
  margin: 25px auto;
}

.nueva-venta-container h2 {
  font-size: 24px;
  color: #000000;
  margin-bottom: 20px;
  font-weight: 600;
  text-align: center;
}

.error-message {
  background-color: #ffe6e6;
  color: #d32f2f;
  padding: 12px;
  border-radius: 8px;
  margin-bottom: 20px;
  text-align: center;
  font-size: 14px;
}

.loader-container {
  text-align: center;
  padding: 20px 0;
}

.loader {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #000;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  animation: spin 1s linear infinite;
  margin: 0 auto;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.form-sections {
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
}

.cliente-section, .venta-section {
  flex: 1;
  padding: 20px;
  background-color: #fff;
  border-radius: 10px;
  border: 1px solid #e5e7eb;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
}

.card {
  background-color: #f9fafb;
  border-radius: 8px;
  padding: 15px;
}

.cliente-antiguo h3, .cliente-form h3, .venta-form h3, .observacion-form h3 {
  color: #000000;
  margin-bottom: 12px;
  font-size: 16px;
  font-weight: 600;
}

.search-cliente {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}

.search-cliente input {
  flex: 1;
  padding: 10px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 14px;
  background-color: #fff;
  transition: border-color 0.3s ease;
}

.search-cliente input:focus {
  outline: none;
  border-color: #000000;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
}

.search-cliente button {
  padding: 10px 20px;
  border: none;
  border-radius: 6px;
  background-color: #000000;
  color: #fff;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s ease;
}

.search-cliente button:disabled {
  background-color: #d1d5db;
  cursor: not-allowed;
}

.search-cliente button:hover:not(:disabled) {
  background-color: #585858;
}

.cliente-data-columns {
  display: flex;
  gap: 0;
}

.cliente-data-columns .column {
  flex: 1;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 6px;
  font-weight: 500;
  color: #000000;
  font-size: 14px;
  width: 120px;
}

.form-group .label-correo,
.form-group .label-direccion {
  margin-right: 5px; /* Reduced margin to bring input closer to label */
}

.form-group input,
.form-group select {
  width: 100%;
  padding: 10px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 14px;
  background-color: #fff;
  transition: border-color 0.3s ease;
}

.form-group input:focus,
.form-group select:focus {
  outline: none;
  border-color: #000000;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
}

.observacion-form textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 14px;
  background-color: #fff;
  resize: vertical;
  transition: border-color 0.3s ease;
}

.observacion-form textarea:focus {
  outline: none;
  border-color: #000000;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
}

.form-actions {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
  padding: 10px;
  background-color: #f5f5f5;
  border-top: 1px solid #e5e7eb;
  border-radius: 0 0 10px 10px;
}

.cancel-button, .submit-button {
  padding: 10px 20px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s ease;
}

.cancel-button {
  background-color: #d1d5db;
  color: #333;
}

.cancel-button:disabled {
  background-color: #e5e7eb;
  cursor: not-allowed;
}

.cancel-button:hover:not(:disabled) {
  background-color: #b0b7c2;
}

.submit-button {
  background-color: #16a34a;
  color: #fff;
}

.submit-button:disabled {
  background-color: #d1d5db;
  cursor: not-allowed;
}

.submit-button:hover:not(:disabled) {
  background-color: #15803d;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .nueva-venta-container {
    padding: 15px;
  }

  .form-sections {
    flex-direction: column;
    gap: 15px;
  }

  .cliente-data-columns {
    flex-direction: column;
    gap: 0;
  }

  .search-cliente {
    flex-direction: column;
    gap: 8px;
  }

  .search-cliente input,
  .search-cliente button {
    width: 100%;
  }

  .form-actions {
    flex-direction: column;
    gap: 8px;
  }

  .cancel-button, .submit-button {
    width: 100%;
  }
}


// ==================== pages/Clientes.css ====================

.clientes-container {
  padding: 30px;
  background-color: #f5f5f5;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  max-width: 1500px; /* Ancho aumentado */
  margin: 25px auto;
}

.error-message {
  background-color: #ffe6e6;
  color: #d32f2f;
  padding: 12px;
  border-radius: 8px;
  margin-bottom: 20px;
  text-align: center;
  font-size: 14px;
}

.clientes-header {
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 25px;
  justify-content: space-between;
}

.search-input {
  padding: 12px;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  width: 40%;
  font-size: 14px;
  background-color: #fff;
  transition: border-color 0.3s ease;
}

.search-input:focus {
  outline: none;
  border-color: #1a3c34;
  box-shadow: 0 0 5px rgba(26, 60, 52, 0.2);
}

.export-button {
  padding: 12px 20px;
  background-color: #000000;
  color: #fff;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s ease;
}

.export-button:hover {
  background-color: #585858;
}

/* ==================== INICIO DE CORRECCIONES DE TABLA ==================== */
.clientes-table {
  width: 100%;
  border-collapse: collapse;
  background-color: #fff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  table-layout: fixed; /* Clave para que los anchos funcionen */
}

.clientes-table th,
.clientes-table td {
  padding: 14px;
  text-align: left;
  font-size: 14px;
  color: #333;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.clientes-table th {
  background-color: #000000;
  color: #fff;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

/* Anchos de columna en porcentajes */
.th-id, .td-id { width: 5%; }
.th-nombre, .td-nombre { width: 14%; }
.th-cedula, .td-cedula { width: 10%; }
.th-correo, .td-correo { width: 17%; }
.th-direccion, .td-direccion { width: 22%; }
.th-ciudad, .td-ciudad { width: 10%; }
.th-telefono, .td-telefono { width: 10%; }
.th-accion, .td-accion { width: 5%; text-align: center; }

.clientes-table tbody tr {
  transition: background-color 0.3s ease;
}

.clientes-table tbody tr:nth-child(even) {
  background-color: #f9fafb;
}

.clientes-table tbody tr:hover {
  background-color: #e6f0ea;
}

.clientes-table td {
  border-bottom: 1px solid #e5e7eb;
}

.expand-button { /* Reemplaza .edit-button */
  background: none;
  border: none;
  cursor: pointer;
  font-size: 16px;
  color: #4b5563;
  transition: color 0.3s ease;
  padding: 8px;
}

.expand-button:hover {
  color: #1a3c34;
}

/* ==================== FIN DE CORRECCIONES DE TABLA ==================== */

.loading-cell {
  text-align: center;
  padding: 20px;
}

.loader {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #000;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  animation: spin 1s linear infinite;
  margin: 0 auto;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.expanded-row td {
  white-space: normal;
  overflow: visible;
  text-overflow: clip;
}

.loading-details {
  text-align: center;
  padding: 20px;
}

.cliente-detalles {
  padding: 20px;
  background-color: #fff;
  border: 1px solid #e5e7eb;
  border-radius: 10px;
  margin: 15px auto;
  width: 90%;
  max-width: 800px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
}

.cliente-detalles h4 {
  color: #1a3c34;
  margin-bottom: 12px;
  font-size: 16px;
  font-weight: 600;
}

.cliente-detalles ul {
  margin: 0 0 15px 20px;
  padding-left: 0;
  list-style-type: none;
}

.cliente-detalles ul li {
  padding: 6px 0;
  color: #4b5563;
  font-size: 14px;
  border-left: 2px solid #1a3c34;
  padding-left: 10px;
  margin-bottom: 5px;
}

.cliente-actions {
  margin-top: 20px;
  display: flex;
  gap: 12px;
  justify-content: center;
}

.action-button {
  padding: 10px 20px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s ease;
}

.action-button.edit {
  background-color: #1a3c34;
  color: #fff;
}

.action-button.edit:hover {
  background-color: #2e5a52;
}

.action-button.add-obs {
  background-color: #16a34a;
  color: #fff;
}

.action-button.add-obs:hover {
  background-color: #15803d;
}

.pagination-container {
  margin-top: 25px;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
}

.pagination-container button {
  padding: 8px 16px;
  background-color: #1a3c34;
  color: #fff;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.pagination-container button:disabled {
  background-color: #d1d5db;
  cursor: not-allowed;
}

.pagination-container button:hover:not(:disabled) {
  background-color: #2e5a52;
}

.pagination-container span {
  font-size: 14px;
  color: #4b5563;
}

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background-color: #fff;
  padding: 25px;
  border-radius: 12px;
  width: 400px;
  max-width: 90%;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
  position: relative;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.modal-header h3 {
  margin: 0;
  font-size: 18px;
  color: #1a3c34;
  font-weight: 600;
}

.modal-close {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #6b7280;
  transition: color 0.3s ease;
}

.modal-close:hover {
  color: #1a3c34;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 6px;
  font-weight: 500;
  color: #1a3c34;
  font-size: 14px;
}

.form-group input,
.form-group textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 14px;
  background-color: #f9fafb;
  transition: border-color 0.3s ease;
}

.form-group input:focus,
.form-group textarea:focus {
  outline: none;
  border-color: #1a3c34;
  box-shadow: 0 0 5px rgba(26, 60, 52, 0.2);
}

.form-group textarea {
  height: 100px;
  resize: vertical;
}

.modal-submit {
  padding: 12px 20px;
  background-color: #1a3c34;
  color: #fff;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  width: 100%;
  font-size: 14px;
  transition: background-color 0.3s ease;
}

.modal-submit:hover {
  background-color: #2e5a52;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .clientes-container {
    padding: 15px;
  }

  .clientes-header {
    flex-direction: column;
    gap: 10px;
  }

  .search-input {
    width: 100%;
  }

  .clientes-table th,
  .clientes-table td {
    padding: 10px;
    font-size: 12px;
  }

  .expand-button {
    font-size: 14px;
  }

  .cliente-detalles {
    width: 100%;
  }

  .cliente-actions {
    flex-direction: column;
    gap: 8px;
  }

  .action-button {
    width: 100%;
  }

  .pagination-container button {
    padding: 6px 12px;
    font-size: 12px;
  }
}



// ==================== pages/Ventas.css ====================

.ventas-container {
  padding: 30px;
  background-color: #f5f5f5;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  max-width: 1300px;
  margin: 25px auto;
}

.error-message {
  background-color: #ffe6e6;
  color: #d32f2f;
  padding: 12px;
  border-radius: 8px;
  margin-bottom: 20px;
  text-align: center;
  font-size: 14px;
}

.ventas-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 25px;
}

.filters {
  display: flex;
  gap: 15px;
}

.filters select {
  padding: 12px;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  font-size: 14px;
  background-color: #fff;
  transition: border-color 0.3s ease;
}

.filters select:focus {
  outline: none;
  border-color: #000000;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
}

.search-section {
  display: flex;
  gap: 15px;
  align-items: center;
}

.search-input {
  padding: 12px;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  width: 200px;
  font-size: 14px;
  background-color: #fff;
  transition: border-color 0.3s ease;
}

.search-input:focus {
  outline: none;
  border-color: #000000;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
}

.export-button, .new-venta-button {
  padding: 12px 20px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s ease;
}

.export-button {
  background-color: #000000;
  color: #fff;
}

.export-button:hover {
  background-color: #585858;
}

.new-venta-button {
  background-color: #16a34a;
  color: #fff;
  padding: 12px 30px;
}

.new-venta-button:hover {
  background-color: #15803d;
}

.loader-container {
  text-align: center;
  padding: 20px 0;
}

.loader {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #000;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  animation: spin 1s linear infinite;
  margin: 0 auto;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.ventas-table {
  width: 100%;
  border-collapse: collapse;
  background-color: #fff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  table-layout: fixed; /* Clave para que los anchos funcionen */
}

.ventas-table th,
.ventas-table td {
  padding: 14px;
  text-align: left;
  font-size: 14px;
  color: #333;
  border-bottom: 1px solid #e5e7eb;
}

.ventas-table th {
  background-color: #000000;
  color: #fff;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.ventas-table tbody tr {
  transition: background-color 0.3s ease;
}

.ventas-table tbody tr:nth-child(even) {
  background-color: #f9fafb;
}

.ventas-table tbody tr:hover {
  background-color: #e6f0ea;
}

/* ==================== INICIO CORRECCIÓN ANCHO Y TEXTO ==================== */

/* Asignación de anchos por porcentajes a cada columna */
.th-oc, .td-oc { width: 6%; }
.th-fecha, .td-fecha { width: 10%; }
.th-vendedor, .td-vendedor { width: 8%; }
.th-cliente, .td-cliente { width: 12%; }
.th-valor, .td-valor { width: 10%; text-align: right; } /* Alineado a la derecha para números */
.th-estado, .td-estado { width: 10%; }
.th-accion, .td-accion { width: 6%; text-align: center; }

/* Evita que el texto se parta en varias líneas y muestra "..." si es muy largo */
.ventas-table td {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
/* ==================== FIN CORRECCIÓN ANCHO Y TEXTO ==================== */

.status-circle {
  display: inline-block;
  width: 10px;
  height: 10px;
  border-radius: 50%;
  margin-right: 5px;
  vertical-align: middle;
}

.status-circle.pendiente { background-color: #f1c40f; }
.status-circle.entregado { background-color: #2ecc71; }
.status-circle.anulado { background-color: #e74c3c; }
.status-circle.abandonado { background-color: #ff6f61; }
.status-circle.archivado { background-color: #95a5a6; }
.status-circle.finalizado { background-color: #2ecc71; }

.expand-button {
  background-color: transparent !important;
  border: none;
  cursor: pointer;
  font-size: 16px;
  color: #4b5563;
  transition: color 0.3s ease;
}
.expand-button svg { color: #4a4a4b; }
.expand-button:hover { color: #000 !important; }

.expanded-row td {
  /* En la fila expandida, permitimos que el contenido se ajuste */
  white-space: normal;
  overflow: visible;
  text-overflow: clip;
}

.loading-details {
  text-align: center;
  padding: 20px;
}

.venta-detalles {
  padding: 20px;
  background-color: #fff;
  border: 1px solid #e5e7eb;
  border-radius: 10px;
  margin: 15px auto;
  width: 90%;
  max-width: 1200px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
}

.detalles-container {
  display: flex;
  justify-content: space-between;
  gap: 20px;
  margin-bottom: 20px;
}

.detalles-cliente, .detalles-pagos {
  flex: 1;
  padding: 15px;
  background-color: #f9fafb;
  border-radius: 8px;
  border: 1px solid #e5e7eb;
  position: relative;
}

.detalles-cliente h4, .detalles-pagos h4 {
  color: #000000;
  margin-bottom: 12px;
  font-size: 16px;
  font-weight: 600;
}

.cliente-data-columns {
  display: flex;
  gap: 40px;
}

.cliente-data-columns .column { flex: 1; }

.cliente-data-columns p {
  margin: 8px 0;
  color: #4b5563;
  font-size: 14px;
  align-items: center;
}

.cliente-data-columns p strong {
  color: #1a3c34;
  min-width: 120px;
}

.detalles-pagos ul {
  margin: 0 0 15px 0;
  padding-left: 0;
  list-style-type: none;
}

.detalles-pagos ul li {
  padding: 6px 0;
  color: #4b5563;
  font-size: 14px;
  border-left: 2px solid #000000;
  padding-left: 10px;
  margin-bottom: 5px;
}

.detalles-pagos p {
  margin: 8px 0;
  color: #4b5563;
  font-size: 14px;
}

.detalles-pagos p strong { color: #1a3c34; }

.separator-line {
  border: 0;
  height: 1px;
  background: #e5e7eb;
  margin: 15px 0;
}

.button-container {
  display: flex;
  justify-content: flex-end;
  margin-top: 15px;
}

.add-button {
  padding: 8px 14px;
  background-color: #16a34a;
  color: #fff;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 13px;
  transition: background-color 0.3s ease;
}

.add-button:hover { background-color: #15803d; }

.observaciones-container {
  display: flex;
  justify-content: space-between;
  gap: 20px;
  margin-bottom: 20px;
}

.observaciones-cliente, .observaciones-venta {
  flex: 1;
  padding: 15px;
  background-color: #f9fafb;
  border-radius: 8px;
  border: 1px solid #e5e7eb;
}

.observaciones-cliente h4, .observaciones-venta h4 {
  color: #000000;
  margin-bottom: 12px;
  font-size: 16px;
  font-weight: 600;
}

.observaciones-cliente ul, .observaciones-venta ul {
  margin: 0 0 15px 0;
  padding-left: 0;
  list-style-type: none;
}

.observaciones-cliente ul li, .observaciones-venta ul li {
  padding: 6px 0;
  color: #4b5563;
  font-size: 14px;
  border-left: 2px solid #000000;
  padding-left: 10px;
  margin-bottom: 5px;
}

.ordenes-pedido-section { margin-top: 20px; }

.ordenes-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
}

.button-group { display: flex; gap: 10px; }

.ordenes-pedido-section h4 {
  color: #000000;
  font-size: 16px;
  font-weight: 600;
}

.ordenes-table {
  width: 100%;
  border-collapse: collapse;
  background-color: #fff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

.ordenes-table th, .ordenes-table td {
  padding: 12px;
  text-align: left;
  font-size: 14px;
  color: #333;
}

.ordenes-table th {
  background-color: #000000;
  color: #fff;
  font-weight: 600;
}

.ordenes-table tbody tr:nth-child(even) { background-color: #f9fafb; }
.ordenes-table tbody tr:hover { background-color: #e6f0ea; }
.ordenes-table td { border-bottom: 1px solid #e5e7eb; }

.edit-venta-button {
  padding: 10px 20px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 14px;
  background-color: #16a34a;
  color: #fff;
  transition: background-color 0.3s ease;
}

.edit-venta-button:hover { background-color: #15803d; }

.pagination-container {
  margin-top: 25px;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
}

.pagination-container button {
  padding: 8px 16px;
  background-color: #000000;
  color: #fff;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.pagination-container button:disabled {
  background-color: #d1d5db;
  cursor: not-allowed;
}

.pagination-container button:hover:not(:disabled) { background-color: #585858; }
.pagination-container span { font-size: 14px; color: #4b5563; }

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background-color: #fff;
  padding: 25px;
  border-radius: 12px;
  width: 400px;
  max-width: 90%;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
  position: relative;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.modal-header h3 {
  margin: 0;
  font-size: 18px;
  color: #000000;
  font-weight: 600;
}

.modal-close {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #6b7280;
  transition: color 0.3s ease;
}

.modal-close:hover { color: #000000; }

.modal-content textarea,
.modal-content input {
  width: 100%;
  padding: 10px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 14px;
  background-color: #f9fafb;
  transition: border-color 0.3s ease;
  margin-bottom: 15px;
}

.modal-content input:disabled { background-color: #e5e7eb; }
.modal-content textarea { height: 100px; resize: vertical; }
.modal-content textarea:focus,
.modal-content input:focus {
  outline: none;
  border-color: #000000;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
}

.form-group { margin-bottom: 15px; }

.form-group label {
  display: block;
  margin-bottom: 6px;
  font-weight: 500;
  color: #000000;
  font-size: 14px;
}

.modal-submit {
  padding: 12px 20px;
  background-color: #000000;
  color: #fff;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  width: 100%;
  font-size: 14px;
  transition: background-color 0.3s ease;
}

.modal-submit:hover { background-color: #585858; }

@media (max-width: 768px) {
  .ventas-container { padding: 15px; }
  .ventas-header { flex-direction: column; gap: 10px; }
  .filters { flex-direction: column; gap: 10px; width: 100%; }
  .filters select { width: 100%; }
  .search-section { flex-direction: column; gap: 10px; width: 100%; }
  .search-input { width: 100%; }
  .ventas-table th, .ventas-table td { padding: 10px; font-size: 12px; }
  .expand-button { font-size: 14px; }
  .venta-detalles { width: 100%; }
  .detalles-container, .observaciones-container { flex-direction: column; gap: 15px; }
  .cliente-data-columns { flex-direction: column; gap: 10px; }
  .cliente-data-columns p strong { min-width: 80px; }
  .ordenes-table th, .ordenes-table td { padding: 8px; font-size: 12px; }
  .pagination-container button { padding: 6px 12px; font-size: 12px; }
  .button-group { flex-direction: column; gap: 8px; }
}



// ==================== pages/Caja.jsx ====================

import React, { useState, useEffect } from 'react';
import './Caja.css';
import axios from 'axios';
import * as XLSX from 'xlsx';

const Caja = () => {
  const [cajaData, setCajaData] = useState([]);
  const [filteredCajaData, setFilteredCajaData] = useState([]);
  const [fechaInicioCaja, setFechaInicioCaja] = useState('');
  const [fechaFinCaja, setFechaFinCaja] = useState('');
  const [queryCaja, setQueryCaja] = useState('');
  const [searchParams, setSearchParams] = useState({ fecha_inicio: '', fecha_fin: '', query: '' });
  const [newCaja, setNewCaja] = useState({ tipo: '', concepto: '', valor: '' });
  const [isCreatingCaja, setIsCreatingCaja] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const pageSize = 30;
  const [isLoading, setIsLoading] = useState(true);
  const [errorMessage, setErrorMessage] = useState('');

  // Función para formatear valores monetarios como $3.000.000
  const formatCurrency = (value) => {
    const roundedValue = Math.round(value); // Redondear para eliminar decimales
    return `$${roundedValue.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.')}`;
  };

  // ==================== INICIO DE CORRECCIÓN FORMATO DE FECHA ====================
  // Se actualiza la función para que coincida con el formato "dd-mmm-yyyy hh:mm"
  const formatDateTime = (dateTimeStr) => {
    if (!dateTimeStr) return '-';
    const date = new Date(dateTimeStr);
    const day = String(date.getDate()).padStart(2, '0');
    const monthNames = ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"];
    const month = monthNames[date.getMonth()];
    const year = date.getFullYear();
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    return `${day}-${month}-${year} ${hours}:${minutes}`;
  };

  // Formatear el tipo de movimiento
  const formatTipo = (tipo) => {
    if (!tipo) return '-';
    return tipo.charAt(0).toUpperCase() + tipo.slice(1);
  };
  // ==================== FIN DE CORRECCIÓN FORMATO DE FECHA ====================

  useEffect(() => {
    fetchData({ page_size: pageSize, page: currentPage });
  }, [currentPage]);

  const fetchData = async (params) => {
    setIsLoading(true);
    const token = localStorage.getItem("accessToken");
    try {
      const response = await axios.get('http://127.0.0.1:8000/api/caja/movimientos/', {
        headers: { Authorization: `Bearer ${token}` },
        params
      });

      setCajaData(response.data.results || []);
      setTotalPages(Math.ceil(response.data.count / pageSize));
      setFilteredCajaData(response.data.results || []);
    } catch (error) {
      console.error('Error cargando datos de Caja:', error);
      setErrorMessage('Error al cargar los datos de Caja.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSearch = () => {
    const params = { page_size: pageSize, page: 1 };
    if (fechaInicioCaja) params.fecha_inicio = fechaInicioCaja;
    if (fechaFinCaja) params.fecha_fin = fechaFinCaja;
    if (queryCaja) params.query = queryCaja;

    setSearchParams(params);
    setCurrentPage(1);
    fetchData(params);
  };

  const exportData = async () => {
    const token = localStorage.getItem("accessToken");
    try {
      const response = await axios.get('http://127.0.0.1:8000/api/caja/movimientos/?page_size=1000', {
        headers: { Authorization: `Bearer ${token}` }
      });
      const data = response.data.results || [];

      const worksheet = XLSX.utils.json_to_sheet(data);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, 'Caja');
      XLSX.writeFile(workbook, 'caja.xlsx');
    } catch (error) {
      console.error('Error al exportar datos de Caja:', error);
      setErrorMessage('Error al exportar los datos de Caja.');
    }
  };

  const handleCreateCaja = async () => {
    const token = localStorage.getItem("accessToken");
    try {
      const payload = {
        tipo: newCaja.tipo === 'Entrada' ? 'ingreso' : 'egreso',
        concepto: newCaja.concepto,
        valor: parseFloat(newCaja.valor)
      };
      await axios.post('http://127.0.0.1:8000/api/caja/movimientos/create/', payload, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setNewCaja({ tipo: '', concepto: '', valor: '' });
      setIsCreatingCaja(false);
      fetchData({ page_size: pageSize, page: 1 });
    } catch (error) {
      console.error('Error al crear movimiento de caja:', error);
      setErrorMessage('Error al crear el movimiento de caja.');
    }
  };

  return (
    <div className="caja-container">
      {errorMessage && <div className="error-message">{errorMessage}</div>}
      <div className="caja-header">
        <div className="filters">
          <input
            type="text"
            className="search-input"
            placeholder="Buscar por ID o concepto"
            value={queryCaja}
            onChange={(e) => setQueryCaja(e.target.value)}
          />
          <input
            type="date"
            value={fechaInicioCaja}
            onChange={(e) => setFechaInicioCaja(e.target.value)}
          />
          <input
            type="date"
            value={fechaFinCaja}
            onChange={(e) => setFechaFinCaja(e.target.value)}
          />
          <button className="search-button" onClick={handleSearch}>Buscar</button>
        </div>
        <div className="actions">
          <button className="export-button" onClick={exportData}>Exportar</button>
          <button className="new-button" onClick={() => setIsCreatingCaja(true)}>Nuevo</button>
        </div>
      </div>

      <table className="caja-table">
        <thead>
          <tr>
            <th className="caja-th-id">ID</th>
            <th className="caja-th-fecha">Fecha y Hora</th>
            <th className="caja-th-concepto">Concepto</th>
            <th className="caja-th-tipo">Tipo</th>
            <th className="caja-th-valor">Valor</th>
            <th className="caja-th-total">Total Acumulado</th>
          </tr>
        </thead>
        <tbody>
          {isLoading ? (
            <tr>
              <td colSpan="6">
                <div className="loader-container">
                  <div className="loader"></div>
                </div>
              </td>
            </tr>
          ) : filteredCajaData.length > 0 ? (
            filteredCajaData.map((item) => (
              <tr key={item.id}>
                <td className="caja-td-id">{item.id}</td>
                <td className="caja-td-fecha">{formatDateTime(item.fecha_hora)}</td>
                <td className="caja-td-concepto">{item.concepto}</td>
                <td className="caja-td-tipo">{formatTipo(item.tipo)}</td>
                <td className="caja-td-valor">{formatCurrency(item.valor)}</td>
                <td className="caja-td-total">{formatCurrency(item.total_acumulado)}</td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="6">No hay movimientos de caja para mostrar.</td>
            </tr>
          )}
        </tbody>
      </table>

      {isCreatingCaja && (
        <CreateCajaModal
          newCaja={newCaja}
          setNewCaja={setNewCaja}
          onSave={handleCreateCaja}
          onClose={() => setIsCreatingCaja(false)}
        />
      )}

      <div className="pagination-container">
        <button disabled={currentPage === 1} onClick={() => setCurrentPage(currentPage - 1)}>Anterior</button>
        <span>{currentPage} / {totalPages}</span>
        <button disabled={currentPage === totalPages} onClick={() => setCurrentPage(currentPage + 1)}>Siguiente</button>
      </div>
    </div>
  );
};

// Modal Component for Creating a Caja Movement
const CreateCajaModal = ({ newCaja, setNewCaja, onSave, onClose }) => {
  const handleChange = (e) => {
    setNewCaja({ ...newCaja, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave();
  };

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <div className="modal-header">
          <h3>Nuevo movimiento de caja</h3>
          <button className="modal-close" onClick={onClose}>×</button>
        </div>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>Tipo:</label>
            <select
              name="tipo"
              value={newCaja.tipo}
              onChange={handleChange}
              required
            >
              <option value="">Seleccionar tipo</option>
              <option value="Entrada">Ingreso</option>
              <option value="Salida">Egreso</option>
            </select>
          </div>
          <div className="form-group">
            <label>Concepto:</label>
            <input
              type="text"
              name="concepto"
              value={newCaja.concepto}
              onChange={handleChange}
              required
            />
          </div>
          <div className="form-group">
            <label>Valor:</label>
            <input
              type="number"
              name="valor"
              value={newCaja.valor}
              onChange={handleChange}
              required
            />
          </div>
          <button type="submit" className="modal-submit">Crear</button>
        </form>
      </div>
    </div>
  );
};

export default Caja;



// ==================== pages/CrearPedidoPage.css ====================

:root {
  --color-primario: #131931; /* Azul principal */
  --hover-btn: #393e50;
  --shadow-color: rgba(0, 0, 0, 0.1);
}

.crear-pedido-page {
  display: flex;
}

main {
  flex: 1;
  padding: 20px;
}

/* Contenedor de los botones */
.botonesContainer {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  margin-bottom: 20px;
}

/* Botones superiores */
.cancelarBtn {
  padding: 10px 20px;
  font-size: 1rem;
  font-weight: 600;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.3s ease;
  background-color: var(--color-primario);
  color: white;
}


.cancelarBtn:hover {
  background-color: var(--hover-btn);
}

/* Formulario */
.formPedido {
  margin: 0 auto;
  width: 100%;
  max-width: 600px;
  display: flex;
  flex-direction: column;
}

.form-container {
  background-color: #fdfdfd;
  border-radius: 8px;
  box-shadow: 0 2px 8px var(--shadow-color);
  padding: 25px;
}

.tituloForm {
  margin: 0 0 20px;
  color: var(--color-primario);
  font-size: 24px;
  font-weight: 600;
  text-align: center;
}

.form-group {
  display: flex;
  align-items: center; /* Centrado vertical */
  margin-bottom: 15px;
}

.form-group label {
  font-size: 1rem;
  color: #333;
  font-weight: 500;
  width: 130px; /* Ancho fijo para etiquetas */
  margin: 0 10px; /* Espacio entre etiqueta y campo */
}

.form-group input,
.form-group select {
  padding: 8px;
  font-size: 14px;
  border: 1px solid #e0e0e0;
  border-radius: 6px;
  width: 100%;
  max-width: 400px;
  height: 40px;
  transition: border-color 0.3s ease;
  margin: 0 auto;
}

.form-group input:focus,
.form-group select:focus {
  border-color: var(--color-primario);
  outline: none;
}
/* Productos */
.tituloProductos {
  margin: 20px 0 15px 9px;
  color: var(--color-primario);
  font-size: 17px;
  font-weight: 500;
}

.producto-group {
  margin-bottom: 20px;
  padding: 15px;
  background-color: #fafafa;
  border-radius: 6px;
  border: 1px solid #f0f0f0;
  position: relative; /* Para posicionar el botón X */
}

.producto-row {
  display: flex;
  align-items: center; /* Alineación ajustada */
  gap: 10px;
  margin-bottom: 10px;
}

.input-cantidad {
  padding: 8px;
  font-size: 14px;
  border: 1px solid #e0e0e0;
  border-radius: 6px;
  width: 100px;
  height: 40px;
  transition: border-color 0.3s ease;
  margin: 0;
}

.select-referencia {
  padding: 8px;
  font-size: 14px;
  border: 1px solid #e0e0e0;
  border-radius: 6px;
  width: 100%;
  max-width: 300px;
  height: 40px;
  transition: border-color 0.3s ease;
}

.input-cantidad:focus,
.select-referencia:focus {
  border-color: var(--color-primario);
  outline: none;
}

.textarea-descripcion {
  padding: 8px;
  font-size: 14px;
  border: 1px solid #e0e0e0;
  border-radius: 6px;
  width: 100%;
  min-height: 60px;
  max-height: 150px;
  resize: vertical;
  transition: border-color 0.3s ease;
}

.textarea-descripcion:focus {
  border-color: var(--color-primario);
  outline: none;
}

/* Botón Eliminar producto */
.remove-product-btn {
  position: absolute;
  top: 5px;
  right: 5px;
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
  font-size: 24px; /* Tamaño del ícono */
  color: #000000; /* Negro */
  transition: color 0.3s ease;
}

.remove-product-btn:hover {
  color: #333333; /* Gris oscuro al pasar el ratón */
}

/* Botones Agregar producto y Enviar */
.form-buttons {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  margin: 20px 0;
}

.agregarProductoBtn,
.enviarBtn {
  padding: 10px 20px;
  font-size: 1rem;
  font-weight: 600;
  border: none;
  border-radius: 6px;
  background-color: var(--color-primario);
  color: white;
  cursor: pointer;
  transition: all 0.3s ease;
}

.agregarProductoBtn:hover,
.enviarBtn:hover {
  background-color: var(--hover-btn);
}

/* Observación */
.nota-group {
  flex-direction: column;
  align-items: flex-start;
}

.nota-group label {
  margin-bottom: 5px;
  width: auto;
}

.textarea-nota {
  padding: 8px;
  font-size: 14px;
  border: 1px solid #e0e0e0;
  border-radius: 6px;
  width: 100%;
  min-height: 80px;
  max-height: 200px;
  resize: vertical;
  transition: border-color 0.3s ease;
}

.textarea-nota:focus {
  border-color: var(--color-primario);
  outline: none;
}

/* PEDIDO IMAGEN */
#pedido-preview {
  width: 700px;
  background-color: #ffffff !important;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  box-shadow: 0 2px 8px var(--shadow-color);
  padding: 20px;
  font-family: Arial, sans-serif;
  font-size: 14px;
  color: #333;
  position: relative;
}

.preview-container {
  display: flex;
  flex-direction: column;
  gap: 15px;
  background-color: #ffffff;
}

.preview-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 2px solid var(--color-primario);
  padding-bottom: 10px;
}

.logoPedido {
  width: 200px;
  height: auto;
}

.numPedido h2 {
  margin: 0;
  font-size: 20px;
  color: var(--color-primario);
  text-align: right;
}

.numPedido .numeroOP {
  margin: 5px 0 0;
  font-size: 18px;
  font-weight: bold;
  color: #dc3545;
  text-align: right;
}

.preview-info {
  display: flex;
  justify-content: space-between;
  gap: 20px;
}

.info-column {
  flex: 1;
}

.info-column p {
  margin: 5px 0;
  font-size: 14px;
}

.info-column p strong {
  color: var(--color-primario);
}

.preview-productos-title {
  margin: 15px 0 10px;
  font-size: 18px;
  font-weight: 600;
  color: var(--color-primario);
}

.preview-productos-table {
  width: 100%;
  border-collapse: collapse;
  table-layout: fixed;
}

.preview-productos-table th,
.preview-productos-table td {
  padding: 10px;
  border-bottom: 1px solid #e0e0e0;
  text-align: left;
  background-color: #ffffff;
}

.preview-productos-table th {
  background-color: #f9f9f9;
  color: var(--color-primario);
  font-weight: 600;
}

.preview-productos-table th:nth-child(1),
.preview-productos-table td:nth-child(1) { width: 20%; } /* Cantidad */
.preview-productos-table th:nth-child(2),
.preview-productos-table td:nth-child(2) { width: 30%; } /* Referencia */
.preview-productos-table th:nth-child(3),
.preview-productos-table td:nth-child(3) { width: 50%; } /* Descripción */

.preview-productos-table .desc-preview {
  word-wrap: break-word;
  max-width: 100%;
  white-space: normal;
}

.preview-nota {
  margin-top: 15px;
}

.preview-nota h3 {
  margin: 0 0 5px;
  font-size: 16px;
  font-weight: 600;
  color: var(--color-primario);
}

.preview-nota p {
  margin: 0;
  padding: 10px;
  background-color: #f9f9f9;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  font-size: 14px;
  line-height: 1.5;
}

/* Media queries para pantallas pequeñas (formulario, no afecta la imagen) */
@media (max-width: 768px) {
  .formPedido {
    width: 100%;
    padding: 15px;
  }

  .form-container {
    padding: 15px;
  }

  .form-group {
    flex-direction: column;
    align-items: flex-start;
  }

  .form-group label {
    width: auto;
    margin-bottom: 5px;
  }

  .form-group input,
  .form-group select {
    max-width: 100%;
  }

  .producto-row {
    flex-direction: column;
  }

  .input-cantidad,
  .select-referencia {
    width: 100%;
    max-width: none;
  }

  .botonesContainer {
    flex-direction: column;
    align-items: flex-end;
  }

  .cancelarBtn {
    width: 100%;
    text-align: center;
  }

  .form-buttons {
    flex-direction: column;
    align-items: flex-end;
  }
}
.checkbox-tela {
  width: 20px !important;
  height: 20px !important;
  margin-left: 0 !important;
  margin-right: 10px !important;
}
.labelTelas{
  width: 165px !important;
}
.textoTela{
  font-size: 15px;
}

/* --- Estilos del Loader --- */
.crear-pedido-loader {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: calc(100vh - 200px);
  text-align: center;
}

.spinner {
  display: inline-block;
  width: 50px;
  height: 50px;
  border: 5px solid rgba(19, 25, 49, 0.2);
  border-top-color: var(--color-primario);
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 15px;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.crear-pedido-loader p {
  color: var(--color-primario);
  font-size: 18px;
  font-weight: 600;
}


// ==================== pages/Clientes.jsx ====================

import React, { useContext, useState, useEffect } from 'react';
import './Clientes.css';
import { AppContext } from '../AppContext';
import axios from 'axios';
import * as XLSX from 'xlsx';
import { FaChevronDown } from 'react-icons/fa'; // Importar el ícono

const Clientes = () => {
  const { clientes: contextClientes, isLoading } = useContext(AppContext);
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedClienteId, setExpandedClienteId] = useState(null);
  const [clienteDetails, setClienteDetails] = useState(null);
  const [loadingDetails, setLoadingDetails] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [filteredClientes, setFilteredClientes] = useState([]);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showObservationModal, setShowObservationModal] = useState(false);
  const [selectedCliente, setSelectedCliente] = useState(null);
  const [errorMessage, setErrorMessage] = useState('');

  const pageSize = 30;

  useEffect(() => {
    const filtered = contextClientes.filter(cliente =>
      cliente.id.toString().toLowerCase().includes(searchTerm.toLowerCase()) ||
      cliente.nombre.toLowerCase().includes(searchTerm.toLowerCase()) ||
      cliente.cedula.toLowerCase().includes(searchTerm.toLowerCase())
    );

    setFilteredClientes(filtered.slice((currentPage - 1) * pageSize, currentPage * pageSize));
    setTotalPages(Math.ceil(filtered.length / pageSize));
  }, [contextClientes, searchTerm, currentPage]);

  const handleExpandCliente = async (clienteId) => {
    if (expandedClienteId === clienteId) {
      setExpandedClienteId(null);
      setClienteDetails(null);
      return;
    }

    setExpandedClienteId(clienteId);
    setLoadingDetails(true);
    setClienteDetails(null);

    const token = localStorage.getItem("accessToken");
    try {
      const response = await axios.get(`http://127.0.0.1:8000/api/cliente/${clienteId}/ventas-observaciones/`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setClienteDetails(response.data);
      setSelectedCliente(contextClientes.find(cliente => cliente.id === clienteId));
    } catch (error) {
      console.error('Error al obtener detalles del cliente:', error);
      setErrorMessage('Error al cargar los detalles del cliente.');
    } finally {
      setLoadingDetails(false);
    }
  };

  const exportClientes = async () => {
    const token = localStorage.getItem("accessToken");
    try {
      const response = await axios.get(`http://127.0.0.1:8000/api/clientes/?page_size=1000`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      const data = response.data.results;

      const worksheet = XLSX.utils.json_to_sheet(data);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, "Clientes");
      XLSX.writeFile(workbook, "clientes.xlsx");
    } catch (error) {
      console.error('Error al exportar clientes:', error);
      setErrorMessage('Error al exportar los clientes.');
    }
  };

  const handleEditCliente = async (updatedCliente) => {
    const token = localStorage.getItem("accessToken");
    try {
      const response = await axios.patch(`http://127.0.0.1:8000/api/clientes/${updatedCliente.id}/`, updatedCliente, {
        headers: { Authorization: `Bearer ${token}` }
      });

      setFilteredClientes(prevClientes =>
        prevClientes.map(cliente =>
          cliente.id === updatedCliente.id ? { ...cliente, ...response.data } : cliente
        )
      );

      setSelectedCliente({ ...selectedCliente, ...response.data });

      setShowEditModal(false);
      setErrorMessage('');
    } catch (error) {
      console.error('Error al editar cliente:', error);
      setErrorMessage(error.response?.data?.error || 'Error al editar el cliente.');
    }
  };

  const handleAddObservation = async (observationText) => {
    const token = localStorage.getItem("accessToken");
    try {
      const response = await axios.post(
        `http://127.0.0.1:8000/api/clientes/${expandedClienteId}/observaciones/`,
        { texto: observationText },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      setClienteDetails(prevDetails => ({
        ...prevDetails,
        observaciones_cliente: [...prevDetails.observaciones_cliente, response.data]
      }));

      setShowObservationModal(false);
      setErrorMessage('');
    } catch (error) {
      console.error('Error al agregar observación:', error);
      setErrorMessage(error.response?.data?.error || 'Error al agregar la observación.');
    }
  };

  return (
    <div className="clientes-container">
      {errorMessage && <div className="error-message">{errorMessage}</div>}
      <div className="clientes-header">
        <input
          type="text"
          className="search-input"
          placeholder="Buscar por ID, nombre, cédula"
          value={searchTerm}
          onChange={(e) => {
            setSearchTerm(e.target.value);
            setCurrentPage(1);
          }}
        />
        <button className="export-button" onClick={exportClientes}>Exportar</button>
      </div>

      <table className="clientes-table">
        <thead>
          <tr>
            <th className="th-id">ID</th>
            <th className="th-nombre">Nombre</th>
            <th className="th-cedula">Cédula</th>
            <th className="th-correo">Correo</th>
            <th className="th-direccion">Dirección</th>
            <th className="th-ciudad">Ciudad</th>
            <th className="th-telefono">Teléfono 1</th>
            <th className="th-telefono">Teléfono 2</th>
            <th className="th-accion"></th>
          </tr>
        </thead>
        <tbody>
          {isLoading ? (
            <tr>
              <td colSpan="9" className="loading-cell">
                <div className="loader"></div>
              </td>
            </tr>
          ) : filteredClientes.length > 0 ? (
            filteredClientes.map((cliente) => (
              <React.Fragment key={cliente.id}>
                <tr>
                  <td className="td-id">{cliente.id}</td>
                  <td className="td-nombre">{cliente.nombre}</td>
                  <td className="td-cedula">{cliente.cedula}</td>
                  <td className="td-correo">{cliente.correo}</td>
                  <td className="td-direccion">{cliente.direccion}</td>
                  <td className="td-ciudad">{cliente.ciudad}</td>
                  <td className="td-telefono">{cliente.telefono1}</td>
                  <td className="td-telefono">{cliente.telefono2}</td>
                  <td className="td-accion">
                    <button className="expand-button" onClick={() => handleExpandCliente(cliente.id)}>
                      <FaChevronDown />
                    </button>
                  </td>
                </tr>
                {expandedClienteId === cliente.id && (
                  <tr className="expanded-row">
                    <td colSpan="9">
                      {loadingDetails ? (
                        <div className="loading-details">
                          <div className="loader"></div>
                        </div>
                      ) : clienteDetails ? (
                        <div className="cliente-detalles">
                          <h4>Compras:</h4>
                          <ul>
                            {clienteDetails.ventas.length > 0 ? clienteDetails.ventas.map((venta) => (
                              <li key={venta.id}>
                                [{venta.id_venta}] - Estado: {venta.estado} - Valor Total: ${parseFloat(venta.valor_total).toLocaleString('es-CO', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                              </li>
                            )) : <li>No hay compras registradas.</li>}
                          </ul>
                          <h4>Observaciones:</h4>
                          <ul>
                            {clienteDetails.observaciones_cliente.length > 0 ? clienteDetails.observaciones_cliente.map((obs) => (
                              <li key={obs.id}>{obs.texto}</li>
                            )) : <li>No hay observaciones registradas.</li>}
                          </ul>
                          <div className="cliente-actions">
                            <button className="action-button edit" onClick={() => setShowEditModal(true)}>Editar Cliente</button>
                            <button className="action-button add-obs" onClick={() => setShowObservationModal(true)}>Agregar Observación</button>
                          </div>
                        </div>
                      ) : null}
                    </td>
                  </tr>
                )}
              </React.Fragment>
            ))
          ) : (
            <tr>
              <td colSpan="9">No hay clientes para mostrar.</td>
            </tr>
          )}
        </tbody>
      </table>

      {showEditModal && selectedCliente && (
        <EditClienteModal
          cliente={selectedCliente}
          onSave={handleEditCliente}
          onClose={() => {
            setShowEditModal(false);
            setErrorMessage('');
          }}
        />
      )}

      {showObservationModal && (
        <AddObservationModal
          onSave={handleAddObservation}
          onClose={() => {
            setShowObservationModal(false);
            setErrorMessage('');
          }}
        />
      )}

      <div className="pagination-container">
        <button disabled={currentPage === 1} onClick={() => setCurrentPage(currentPage - 1)}>Anterior</button>
        <span>{currentPage} / {totalPages}</span>
        <button disabled={currentPage === totalPages} onClick={() => setCurrentPage(currentPage + 1)}>Siguiente</button>
      </div>
    </div>
  );
};

// Modal Component for Editing a Client
const EditClienteModal = ({ cliente, onSave, onClose }) => {
  const [formData, setFormData] = useState({
    id: cliente.id,
    nombre: cliente.nombre,
    cedula: cliente.cedula,
    correo: cliente.correo,
    direccion: cliente.direccion,
    ciudad: cliente.ciudad,
    telefono1: cliente.telefono1,
    telefono2: cliente.telefono2,
  });

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(formData);
  };

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <div className="modal-header">
          <h3>Editar cliente #{cliente.id}</h3>
          <button className="modal-close" onClick={onClose}>×</button>
        </div>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>Nombre:</label>
            <input type="text" name="nombre" value={formData.nombre} onChange={handleChange} required />
          </div>
          <div className="form-group">
            <label>Cédula:</label>
            <input type="text" name="cedula" value={formData.cedula} onChange={handleChange} required />
          </div>
          <div className="form-group">
            <label>Correo:</label>
            <input type="email" name="correo" value={formData.correo} onChange={handleChange} required />
          </div>
          <div className="form-group">
            <label>Dirección:</label>
            <input type="text" name="direccion" value={formData.direccion} onChange={handleChange} required />
          </div>
          <div className="form-group">
            <label>Ciudad:</label>
            <input type="text" name="ciudad" value={formData.ciudad} onChange={handleChange} required />
          </div>
          <div className="form-group">
            <label>Teléfono 1:</label>
            <input type="text" name="telefono1" value={formData.telefono1} onChange={handleChange} />
          </div>
          <div className="form-group">
            <label>Teléfono 2:</label>
            <input type="text" name="telefono2" value={formData.telefono2} onChange={handleChange} />
          </div>
          <button type="submit" className="modal-submit">Guardar</button>
        </form>
      </div>
    </div>
  );
};

// Modal Component for Adding an Observation
const AddObservationModal = ({ onSave, onClose }) => {
  const [observationText, setObservationText] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!observationText.trim()) {
      alert('La observación no puede estar vacía.');
      return;
    }
    onSave(observationText);
  };

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <div className="modal-header">
          <h3>Observación al cliente</h3>
          <button className="modal-close" onClick={onClose}>×</button>
        </div>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <textarea
              value={observationText}
              onChange={(e) => setObservationText(e.target.value)}
              placeholder="Escribe una observación..."
              required
            />
          </div>
          <button type="submit" className="modal-submit">Guardar</button>
        </form>
      </div>
    </div>
  );
};

export default Clientes;


